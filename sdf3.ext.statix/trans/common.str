module common

imports
  libstratego-lib
  libstrc
  analysis/types
  runtime/nabl/-
  runtime/task/-
  runtime/types/-
  generation/gen-utils/to-str
  analysis/desugar

imports
  utils

imports
  signatures/aliases/-
  signatures/aterms/-
  signatures/basic/-
  signatures/characterclass/-
  signatures/constants/-
  signatures/grammar/-
  signatures/kernel/-
  signatures/labels/-
  signatures/layout/-
  signatures/layout-constraints/-
  signatures/lifting/-
  signatures/literals/-
  signatures/modules/-
  signatures/priority/-
  signatures/regular/-
  signatures/renaming/-
  signatures/restrictions/-
  signatures/sdf2-core/-
  signatures/sorts/-
  signatures/symbols/-
  signatures/TemplateLang-sig

signature
  sorts Signature Param ExtSort
  constructors
    /*             sortname   consname?     parameters  */
    CfSignature  : string   * opt(string) * list(Param) -> Signature
    LexSignature : string   * opt(string) * list(Param) -> Signature
    VarSignature : string   * opt(string) * list(Param) -> Signature
    /*             sort   varname */
    Param        : Sort * string  -> Param
    /*             sort */
    CfSort       : Sort -> ExtSort
    LexSort      : Sort -> ExtSort
    VarSort      : Sort -> ExtSort


rules
  language-spec-name = prim("pp_language_spec_name") <+ !"unknown"


/**
 * Collecting signatures from sections
 */
rules

  // geninj-sections-to-signatures :: list(SDF3.Section) -> list(Signature)
  geninj-sections-to-signatures = filter(geninj-section-to-signatures); flatten-list-once


  // geninj-section-to-signatures :: SDF3.Section -> list(Signature)
  geninj-section-to-signatures: SDFSection(ContextFreeSyntax(productions)) -> signatures
  with signatures := <filter(geninj-production-to-signature(geninj-make-cf-signature) + geninj-template-to-signature(geninj-make-cf-signature))> productions

  geninj-section-to-signatures: SDFSection(LexicalSyntax(productions)) -> signatures
  with signatures := <filter(geninj-production-to-signature(geninj-make-lex-signature))> productions

  geninj-section-to-signatures: SDFSection(Variables(productions)) -> signatures
  with signatures := <filter(geninj-production-to-signature(geninj-make-var-signature))> productions

  geninj-section-to-signatures: SDFSection(Kernel(productions)) -> signatures
  with signatures := <filter(geninj-kernel-production-to-signature)> productions

  geninj-section-to-signatures: TemplateSection(templates) -> signatures
  with signatures := <filter(geninj-template-to-signature(geninj-make-cf-signature))> templates


  // geninj-make-cf-signature(|string, opt(string), list(Param)) :: Signature
  geninj-make-cf-signature(|sortname, cons, params)  = !CfSignature(sortname, cons, params)
  // geninj-make-lex-signature(|string, opt(string), list(Param)) :: Signature
  geninj-make-lex-signature(|sortname, cons, params) = !LexSignature(sortname, cons, params)
  // geninj-make-var-signature(|string, opt(string), list(Param)) :: Signature
  geninj-make-var-signature(|sortname, cons, params) = !VarSignature(sortname, cons, params)


  // geninj-production-to-signature(string * opt(string) * list(Param) -> Signature) :: SDF3.GeneralProduction -> Signature
  geninj-production-to-signature(s): SdfProduction(symboldef, Rhs(body), Attrs(attrs))
  -> <s(|sortname, None(), params)>
  where <not(geninj-ignored-production-symboldef)> symboldef
      ; <not(geninj-ignored-production-attr)> attrs
  with sortname := <geninj-symboldef-to-name> symboldef
     ; params   := <geninj-body-to-params> body

  geninj-production-to-signature(s): SdfProductionWithCons(SortCons(symboldef, Constructor(consname)), body, Attrs(attrs))
  -> <s(|sortname, Some(consname), params)>
  where <not(geninj-ignored-production-symboldef)> symboldef
      ; <not(geninj-ignored-production-attr)> attrs
  with sortname := <geninj-symboldef-to-name> symboldef
     ; params   := <geninj-body-to-params> body


  // geninj-template-to-signature(string * opt(string) * list(Param) -> Signature) :: SDF3.GeneralProduction -> Signature
  geninj-template-to-signature(s): TemplateProduction(symboldef, body, Attrs(attrs))
  -> <s(|sortname, None(), params)>
  where <not(geninj-ignored-production-symboldef)> symboldef
      ; <not(geninj-ignored-production-attr)> attrs
  with sortname := <geninj-symboldef-to-name> symboldef
     ; params   := <geninj-body-to-params> body

  geninj-template-to-signature(s): TemplateProductionWithCons(SortCons(symboldef, Constructor(consname)), body, Attrs(attrs))
  -> <s(|sortname, Some(consname), params)>
  where <not(geninj-ignored-production-symboldef)> symboldef
      ; <not(geninj-ignored-production-attr)> attrs
  with sortname := <geninj-symboldef-to-name> symboldef
     ; params   := <geninj-body-to-params> body


  // geninj-kernel-production-to-signature :: SDF3.GeneralProduction -> Signature
  geninj-kernel-production-to-signature: SdfProduction(Cf(symboldef), body, Attrs(attrs))
  -> CfSignature(sortname, None(), params)
  where <not(geninj-ignored-production-symboldef)> symboldef
      ; <not(geninj-ignored-production-attr)> attrs
  with sortname := <geninj-symboldef-to-name> symboldef
     ; params   := <geninj-body-to-params> body

  geninj-kernel-production-to-signature(s): SdfProductionWithCons(SortCons(Cf(symboldef), Constructor(consname)), body, Attrs(attrs))
  -> CfSignature(sortname, Some(consname), params)
  where <not(geninj-ignored-production-symboldef)> symboldef
      ; <not(geninj-ignored-production-attr)> attrs
  with sortname := <geninj-symboldef-to-name> symboldef
     ; params   := <geninj-body-to-params> body

  geninj-kernel-production-to-signature: SdfProduction(Lex(symboldef), body, Attrs(attrs))
  -> LexSignature(sortname, None(), params)
  where <not(geninj-ignored-production-symboldef)> symboldef
      ; <not(geninj-ignored-production-attr)> attrs
  with sortname := <geninj-symboldef-to-name> symboldef
     ; params   := <geninj-body-to-params> body

  geninj-kernel-production-to-signature(s): SdfProductionWithCons(SortCons(Lex(symboldef), Constructor(consname)), body, Attrs(attrs))
  -> LexSignature(sortname, Some(consname), params)
  where <not(geninj-ignored-production-symboldef)> symboldef
      ; <not(geninj-ignored-production-attr)> attrs
  with sortname := <geninj-symboldef-to-name> symboldef
     ; params   := <geninj-body-to-params> body

  geninj-kernel-production-to-signature: SdfProduction(Var(symboldef), body, Attrs(attrs))
  -> VarSignature(sortname, None(), params)
  where <not(geninj-ignored-production-symboldef)> symboldef
      ; <not(geninj-ignored-production-attr)> attrs
  with sortname := <geninj-symboldef-to-name> symboldef
     ; params   := <geninj-body-to-params> body

  geninj-kernel-production-to-signature(s): SdfProductionWithCons(SortCons(Var(symboldef), Constructor(consname)), body, Attrs(attrs))
  -> VarSignature(sortname, Some(consname), params)
  where <not(geninj-ignored-production-symboldef)> symboldef
      ; <not(geninj-ignored-production-attr)> attrs
  with sortname := <geninj-symboldef-to-name> symboldef
     ; params   := <geninj-body-to-params> body


  // geninj-body-to-params :: SDF3.Symbols -> list(Param)
  geninj-body-to-params = where(<reset-counter> "injections"); collect-om-concat(geninj-symbol-to-param)


  // geninj-symbol-to-param :: SDF3.Symbol              -> Param
  geninj-symbol-to-param: s@Sort(name)                  -> Param(s, $[t[<next-counter>  "injections"]])
  geninj-symbol-to-param: s@Opt(sort)                   -> Param(s, $[t[<next-counter>  "injections"]])
  geninj-symbol-to-param: s@Iter(sort)                  -> Param(s, $[ts[<next-counter> "injections"]])
  geninj-symbol-to-param: s@IterSep(sort, _)            -> Param(s, $[ts[<next-counter> "injections"]])
  geninj-symbol-to-param: s@IterStar(sort)              -> Param(s, $[ts[<next-counter> "injections"]])
  geninj-symbol-to-param: s@IterStarSep(sort, _)        -> Param(s, $[ts[<next-counter> "injections"]])
  geninj-symbol-to-param: Cf(symbol)                    -> <geninj-symbol-to-param> symbol
  geninj-symbol-to-param: Lex(symbol)                   -> <geninj-symbol-to-param> symbol
  geninj-symbol-to-param: Varsym(symbol)                -> <geninj-symbol-to-param> symbol
  geninj-symbol-to-param: Label(_, symbol)              -> <geninj-symbol-to-param> symbol
  geninj-symbol-to-param: CharClass(_)                  -> <fail>
  geninj-symbol-to-param: Lit(_)                        -> <fail>
  geninj-symbol-to-param: CiLit(_)                      -> <fail>
  geninj-symbol-to-param: Sequence(_, _)                -> <fail>
  geninj-symbol-to-param: Alt(_, _)                     -> <fail>
  geninj-symbol-to-param: Start()                       -> <fail>
  geninj-symbol-to-param: FileStart()                   -> <fail>
  geninj-symbol-to-param: EOF()                         -> <fail>
  geninj-symbol-to-param: ParameterizedSort(_, _)       -> <fail>


  // geninj-symboldef-to-name :: SDF3.SymbolDef         -> string
  geninj-symboldef-to-name: SortDef(sort)               -> sort
  geninj-symboldef-to-name: Cf(sortdef)                 -> <geninj-symboldef-to-name> sortdef   // For kernel productions,  Cf(_) is handled in the strategy. For other productions, this is invalid.
  geninj-symboldef-to-name: Lex(sortdef)                -> <geninj-symboldef-to-name> sortdef   // For kernel productions, Lex(_) is handled in the strategy. For other productions, this is invalid.
  geninj-symboldef-to-name: Var(sortdef)                -> <geninj-symboldef-to-name> sortdef   // For kernel productions, Var(_) is handled in the strategy. For other productions, this is invalid.


rules

  // geninj-ignored-production-symboldef :: SDF3.SymbolDef -> SDF3.SymbolDef
  geninj-ignored-production-symboldef = ?Alt(_, _)
  geninj-ignored-production-symboldef = ?CharClass(_)
  geninj-ignored-production-symboldef = ?CiLit(_)
  geninj-ignored-production-symboldef = ?EOF()
  geninj-ignored-production-symboldef = ?FileStart()
  geninj-ignored-production-symboldef = ?Iter(_)
  geninj-ignored-production-symboldef = ?IterSep(_, _)
  geninj-ignored-production-symboldef = ?IterStar(_)
  geninj-ignored-production-symboldef = ?IterStarSep(_, _)
  geninj-ignored-production-symboldef = ?Label(_)
  geninj-ignored-production-symboldef = ?Layout()
  geninj-ignored-production-symboldef = ?Lit(_)
  geninj-ignored-production-symboldef = ?Opt(_)
  geninj-ignored-production-symboldef = ?ParameterizedSort(_, _)
  geninj-ignored-production-symboldef = ?Sequence(_, _)
  geninj-ignored-production-symboldef = ?Start()
  geninj-ignored-production-symboldef = ?Varsym(_)

  // geninj-ignored-production-attr :: [SDF3.Attribute] -> SDF3.Attribute
  geninj-ignored-production-attr = fetch-elem(?Reject() + ?Bracket())


/**
 * Collecting sorts from sections
 */
rules

  // geninj-sections-to-sorts :: list(SDF3.Section) -> list(ExtSort)
  geninj-sections-to-sorts = filter(geninj-section-to-sorts); flatten-list-once


  // geninj-section-to-signatures :: SDF3.Section -> list(Signature)
  geninj-section-to-sorts: SDFSection(Sorts(srts)) -> srts'
  with srts' := <map(geninj-sort-to-extsort)> srts


  // geninj-sort-to-extsort :: SDF3.SymbolDef -> ExtSort
  geninj-sort-to-extsort: DeclSortCf(name)  -> CfSort(name)
  geninj-sort-to-extsort: DeclSortLex(name) -> LexSort(name)
  geninj-sort-to-extsort: DeclSortVar(name) -> VarSort(name)


rules

  // geninj-symbol-to-name :: SDF3.Symbol               -> string
  geninj-symbol-to-name: Sort(name)                     -> name
  geninj-symbol-to-name: Opt(symbol)                    -> <geninj-symbol-to-name> symbol
  geninj-symbol-to-name: Iter(symbol)                   -> $[[<geninj-symbol-to-name> symbol]s]
  geninj-symbol-to-name: IterSep(symbol, _)             -> $[[<geninj-symbol-to-name> symbol]s]
  geninj-symbol-to-name: IterStar(symbol)               -> $[[<geninj-symbol-to-name> symbol]s]
  geninj-symbol-to-name: IterStarSep(symbol, _)         -> $[[<geninj-symbol-to-name> symbol]s]
  geninj-symbol-to-name: Cf(symbol)                     -> <geninj-symbol-to-name> symbol
  geninj-symbol-to-name: Lex(symbol)                    -> <geninj-symbol-to-name> symbol
  geninj-symbol-to-name: Varsym(symbol)                 -> <geninj-symbol-to-name> symbol
  geninj-symbol-to-name: Label(_, symbol)               -> <geninj-symbol-to-name> symbol
  geninj-symbol-to-name: Alt(_, _)                      -> <fail>
  geninj-symbol-to-name: CharClass(_)                   -> <fail>
  geninj-symbol-to-name: CiLit(_)                       -> <fail>
  geninj-symbol-to-name: EOF()                          -> <fail>
  geninj-symbol-to-name: FileStart()                    -> <fail>
  geninj-symbol-to-name: Layout()                       -> <fail>
  geninj-symbol-to-name: Lit(_)                         -> <fail>
  geninj-symbol-to-name: ParameterizedSort(_, _)        -> <fail>
  geninj-symbol-to-name: Sequence(_, _)                 -> <fail>
  geninj-symbol-to-name: Start()                        -> <fail>

  geninj-param-to-name: Param(symbol, _) -> <geninj-symbol-to-name> symbol


rules

  // Generates a constructor name for the injection with the specified sort name and arguments
  geninj-generate-inj-name: (targetname, params) ->  $[[sourcename]2[targetname]]
  where <?[_|_]> params
  with paramnames := <map(geninj-param-to-name)> params
     ; sourcename := <string-join(|"-")> paramnames

