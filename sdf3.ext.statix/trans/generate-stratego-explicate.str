module generate-stratego-explicate

imports
  libstratego-lib
  libstrc
  analysis/types
  runtime/nabl/-
  runtime/task/-
  runtime/types/-
  generation/gen-utils/to-str
  analysis/desugar

imports
  common
  utils

imports
  signatures/aliases/-
  signatures/aterms/-
  signatures/basic/-
  signatures/characterclass/-
  signatures/constants/-
  signatures/grammar/-
  signatures/kernel/-
  signatures/labels/-
  signatures/layout/-
  signatures/layout-constraints/-
  signatures/lifting/-
  signatures/literals/-
  signatures/modules/-
  signatures/priority/-
  signatures/regular/-
  signatures/renaming/-
  signatures/restrictions/-
  signatures/sdf2-core/-
  signatures/sorts/-
  signatures/symbols/-
  signatures/TemplateLang-sig

////////////////////////////////////
// Explicate/implicate injections //
////////////////////////////////////

rules

  geninj-sort-to-explicate-rule(|lang): LexSort(sortname) -> [
    // explicate-injections-MyLang :: ? -> ?
    DefHasType($[explicate-injections-[lang]], FunNoArgsType(DynT(Dyn()), DynT(Dyn()))),
    // explicate-injections-MyLang = explicate-injections-MyLang-MySort
    SDefNoArgs($[explicate-injections-[lang]], CallNoArgs(SVar($[explicate-injections-[lang]-[sortname]]))),

    // explicate-injections-MyLang-MySort :: MySort -> MySort
    DefHasType($[explicate-injections-[lang]-[sortname]], FunNoArgsType(SortNoArgs(sortname), SortNoArgs(sortname))),
    // explicate-injections-MyLang-MySort = origin-track-forced(\
    //   t -> t
    //   where <is-MyLang-MySort-or-inj> t
    // \)
    SDefNoArgs($[explicate-injections-[lang]-[sortname]], <origin-preserving-rule> Rule(
      Var("t"), Var("t"),
      BA(is-call, Var("t"))
    ))
  ]
  with is-call := <geninj-symbol-to-is-call(|lang)> Sort(sortname)

  geninj-sort-to-implicate-rule(|lang): LexSort(sortname) -> [
    // implicate-injections-MyLang :: ? -> ?
    DefHasType($[implicate-injections-[lang]], FunNoArgsType(DynT(Dyn()), DynT(Dyn()))),
    // implicate-injections-MyLang = implicate-injections-MyLang-MySort
    SDefNoArgs($[implicate-injections-[lang]], CallNoArgs(SVar($[implicate-injections-[lang]-[sortname]]))),

    // implicate-injections-MyLang-MySort :: MySort -> MySort
    DefHasType($[implicate-injections-[lang]-[sortname]], FunNoArgsType(SortNoArgs(sortname), SortNoArgs(sortname))),
    // implicate-injections-MyLang-MySort = origin-track-forced(\
    //   t -> t
    //   where <is-MyLang-MySort-or-inj> t
    // \)
    SDefNoArgs($[implicate-injections-[lang]-[sortname]], <origin-preserving-rule> Rule(
      Var("t"), Var("t"),
      BA(is-call, Var("t"))
    ))
  ]
  with is-call := <geninj-symbol-to-is-call(|lang)> Sort(sortname)

  geninj-sort-to-explicate-rule(|lang): CfSort(sortname) -> [
    // explicate-injections-MyLang :: ? -> ?
    DefHasType($[explicate-injections-[lang]], FunNoArgsType(DynT(Dyn()), DynT(Dyn()))),
    // explicate-injections-MyLang = explicate-injections-MyLang-MySort
    SDefNoArgs($[explicate-injections-[lang]], CallNoArgs(SVar($[explicate-injections-[lang]-[sortname]])))
  ]

  geninj-sort-to-implicate-rule(|lang): CfSort(sortname) -> [
    // implicate-injections-MyLang :: ? -> ?
    DefHasType($[implicate-injections-[lang]], FunNoArgsType(DynT(Dyn()), DynT(Dyn()))),
    // implicate-injections-MyLang = implicate-injections-MyLang-MySort
    SDefNoArgs($[implicate-injections-[lang]], CallNoArgs(SVar($[implicate-injections-[lang]-[sortname]])))
  ]

rules

  geninj-sort-to-explicate-placeholder-rule(|lang): CfSort(sortname) -> [
    // explicate-injections-MyLang-MySort :: MySort -> MySort
    DefHasType($[explicate-injections-[lang]-[sortname]], FunNoArgsType(SortNoArgs(sortname), SortNoArgs(sortname))),
    // explicate-injections-MyLang-MySort = origin-track-forced(\
    //   MySort-Plhdr(){anno*} -> MySort-Plhdr(){anno*}
    // /)
    SDefNoArgs($[explicate-injections-[lang]-[sortname]], <origin-preserving-rule> RuleNoCond(
      AnnoList(Op($[[sortname]-Plhdr], []), [Var(ListVar("anno*"))]),
      AnnoList(Op($[[sortname]-Plhdr], []), [Var(ListVar("anno*"))])
    ))
  ]

  geninj-sort-to-implicate-placeholder-rule(|lang): CfSort(sortname) -> [
    // implicate-injections-MyLang-MySort :: MySort -> MySort
    DefHasType($[implicate-injections-[lang]-[sortname]], FunNoArgsType(SortNoArgs(sortname), SortNoArgs(sortname))),
    // implicate-injections-MyLang-MySort = origin-track-forced(\
    //   MySort-Plhdr(){anno*} -> MySort-Plhdr(){anno*}
    // \)
    SDefNoArgs($[implicate-injections-[lang]-[sortname]], <origin-preserving-rule> RuleNoCond(
      AnnoList(Op($[[sortname]-Plhdr], []), [Var(ListVar("anno*"))]),
      AnnoList(Op($[[sortname]-Plhdr], []), [Var(ListVar("anno*"))])
    ))
  ]

rules

  geninj-sort-to-explicate-ambiguity-rule(|lang): CfSort(sortname) -> [
    // explicate-injections-MyLang-MySort :: MySort -> MySort
    DefHasType($[explicate-injections-[lang]-[sortname]], FunNoArgsType(SortNoArgs(sortname), SortNoArgs(sortname))),
    // explicate-injections-MyLang-MySort = origin-track-forced(\
    //   amb(alts){anno*} -> amb(alts'){anno*}
    //   with alts' := <map(explicate-injections-MyLang-MySort)> alts
    // \)
    SDefNoArgs($[explicate-injections-[lang]-[sortname]], <origin-preserving-rule> Rule(
      AnnoList(Op("amb", [Var("alts")]), [Var(ListVar("anno*"))]),
      AnnoList(Op("amb", [Var("alts'")]), [Var(ListVar("anno*"))]),
      [ WithClause(Assign(Var("alts'"), App(call, Var("alts")))
      )]
    ))
  ]
  with call := <geninj-symbol-to-explication-call(|lang)> Iter(Sort(sortname))

  geninj-sort-to-implicate-ambiguity-rule(|lang): CfSort(sortname) -> [
    // implicate-injections-MyLang-MySort :: MySort -> MySort
    DefHasType($[implicate-injections-[lang]-[sortname]], FunNoArgsType(SortNoArgs(sortname), SortNoArgs(sortname))),
    // implicate-injections-MyLang-MySort = origin-track-forced(\
    //   amb(alts){anno*} -> amb(alts'){anno*}
    //   with alts' := <map(implicate-injections-MyLang-MySort)> alts
    // \)
    SDefNoArgs($[implicate-injections-[lang]-[sortname]], <origin-preserving-rule> Rule(
      AnnoList(Op("amb", [Var("alts")]), [Var(ListVar("anno*"))]),
      AnnoList(Op("amb", [Var("alts'")]), [Var(ListVar("anno*"))]),
      [ WithClause(Assign(Var("alts'"), App(call, Var("alts")))
      )]
    ))
  ]
  with call := <geninj-symbol-to-implication-call(|lang)> Iter(Sort(sortname))

rules

  geninj-sig-to-explicate-rule(|lang): CfSignature(sortname, None(), [param@Param(tosort, varname)]) -> [
    // explicate-injections-MyLang-MySort :: MySort -> MySort
    DefHasType($[explicate-injections-[lang]-[sortname]], FunNoArgsType(SortNoArgs(sortname), SortNoArgs(sortname))),
    // explicate-injections-MyLang-MySort = origin-track-forced(\
    //   t -> ToSort2MySort(<explicate-injections-MyLang-ToSort> t)
    //   where <is-MyLang-MySort-or-inj> t
    // \)
    SDefNoArgs($[explicate-injections-[lang]-[sortname]], <origin-preserving-rule> Rule(
      Var(varname), NoAnnoList(Op(consname, [expl-call])),
      BA(is-call, Var(varname))
    ))
  ]
  with consname   := <geninj-generate-inj-name> (sortname, [param])
     ; expl-call  := <geninj-param-to-explication-app(|lang)> param
     ; is-call    := <geninj-symbol-to-is-call(|lang)> tosort

  geninj-sig-to-implicate-rule(|lang): CfSignature(sortname, None(), [param@Param(tosort, varname)]) -> [
    // implicate-injections-MyLang-MySort :: MySort -> MySort
    DefHasType($[implicate-injections-[lang]-[sortname]], FunNoArgsType(SortNoArgs(sortname), SortNoArgs(sortname))),
    // implicate-injections-MyLang-MySort = origin-track-forced(\
    //   ToSort2MySort(t) -> <implicate-injections-MyLang-ToSort> t
    // \)
    SDefNoArgs($[implicate-injections-[lang]-[sortname]], <origin-preserving-rule> RuleNoCond(
      NoAnnoList(Op(consname, [Var(varname)])),
      impl-call
    ))
  ]
  with consname   := <geninj-generate-inj-name> (sortname, [param])
     ; impl-call  := <geninj-param-to-implication-app(|lang)> param

  geninj-sig-to-explicate-rule(|lang): CfSignature(sortname, Some(consname), []) -> [
    // explicate-injections-MyLang-MySort :: MySort -> MySort
    DefHasType($[explicate-injections-[lang]-[sortname]], FunNoArgsType(SortNoArgs(sortname), SortNoArgs(sortname))),
    // explicate-injections-MyLang-MySort = origin-track-forced(\
    //   MyCons(){anno*} -> MyCons(){anno*}
    // \)
    SDefNoArgs($[explicate-injections-[lang]-[sortname]], <origin-preserving-rule> RuleNoCond(
      AnnoList(Op(consname, []), [Var(ListVar("anno*"))]),
      AnnoList(Op(consname, []), [Var(ListVar("anno*"))])
    ))
  ]

  geninj-sig-to-implicate-rule(|lang): CfSignature(sortname, Some(consname), []) -> [
    // implicate-injections-MyLang-MySort :: MySort -> MySort
    DefHasType($[implicate-injections-[lang]-[sortname]], FunNoArgsType(SortNoArgs(sortname), SortNoArgs(sortname))),
    // implicate-injections-MyLang-MySort = origin-track-forced(\
    //   MyCons(){anno*} -> MyCons(){anno*}
    // \)
    SDefNoArgs($[implicate-injections-[lang]-[sortname]], <origin-preserving-rule> RuleNoCond(
      AnnoList(Op(consname, []), [Var(ListVar("anno*"))]),
      AnnoList(Op(consname, []), [Var(ListVar("anno*"))])
    ))
  ]

  geninj-sig-to-explicate-rule(|lang): CfSignature(sortname, Some(consname), params@[_|_]) -> [
    // explicate-injections-MyLang-MySort :: MySort -> MySort
    DefHasType($[explicate-injections-[lang]-[sortname]], FunNoArgsType(SortNoArgs(sortname), SortNoArgs(sortname))),
    // explicate-injections-MyLang-MySort = origin-track-forced(\
    //   MyCons(t1, t2){anno*} -> MyCons(t1', t2'){anno*}
    //   with t1' := <explicate-injections-MyLang-SubSort> t1
    //      ; t2' := <explicate-injections-MyLang-SubSort> t2
    // \)
    SDefNoArgs($[explicate-injections-[lang]-[sortname]], <origin-preserving-rule> Rule(
      AnnoList(Op(consname, from-vars), [Var(ListVar("anno*"))]),
      AnnoList(Op(consname, to-vars), [Var(ListVar("anno*"))]),
      [ WithClause(body) ]
    ))
  ]
  with from-vars := <geninj-params-to-vars> params
     ; to-vars   := <geninj-params-to-vars-tick> params
     ; body      := <geninj-params-to-explication-assigns(|lang)> params

  geninj-sig-to-implicate-rule(|lang): CfSignature(sortname, Some(consname), params@[_|_]) -> [
    // implicate-injections-MyLang-MySort :: MySort -> MySort
    DefHasType($[implicate-injections-[lang]-[sortname]], FunNoArgsType(SortNoArgs(sortname), SortNoArgs(sortname))),
    // implicate-injections-MyLang-MySort = origin-track-forced(\
    //   MyCons(t1, t2){anno*} -> MyCons(t1', t2'){anno*}
    //   with t1' := <implicate-injections-MyLang-SubSort> t1
    //      ; t2' := <implicate-injections-MyLang-SubSort> t2
    // \)
    SDefNoArgs($[implicate-injections-[lang]-[sortname]], <origin-preserving-rule> Rule(
      AnnoList(Op(consname, from-vars), [Var(ListVar("anno*"))]),
      AnnoList(Op(consname, to-vars), [Var(ListVar("anno*"))]),
      [ WithClause(body) ]
    ))
  ]
  with from-vars := <geninj-params-to-vars> params
     ; to-vars   := <geninj-params-to-vars-tick> params
     ; body      := <geninj-params-to-implication-assigns(|lang)> params


rules

  geninj-params-to-explication-assigns(|lang): params -> seqs
  with assigns := <map(geninj-param-to-explication-assign(|lang))> params
     ; seqs := <geninj-strs-to-seqs> assigns

  geninj-params-to-implication-assigns(|lang): params -> seqs
  with assigns := <map(geninj-param-to-implication-assign(|lang))> params
     ; seqs := <geninj-strs-to-seqs> assigns

  geninj-param-to-explication-assign(|lang): param@Param(symbol, newname) -> Assign(to-var, app)
  with to-var := <geninj-param-to-var-tick> param
     ; app := <geninj-param-to-explication-app(|lang)> param

  geninj-param-to-implication-assign(|lang): param@Param(symbol, newname) -> Assign(to-var, app)
  with to-var := <geninj-param-to-var-tick> param
     ; app := <geninj-param-to-implication-app(|lang)> param

rules

  geninj-params-to-explication-apps(|lang) = map(geninj-param-to-explication-app(|lang))
  geninj-param-to-explication-app(|lang): Param(symbol, newname) -> App(call, Var(newname))
  with call := <geninj-symbol-to-explication-call(|lang)> symbol

  geninj-params-to-implication-apps(|lang) = map(geninj-param-to-implication-app(|lang))
  geninj-param-to-implication-app(|lang): Param(symbol, newname) -> App(call, Var(newname))
  with call := <geninj-symbol-to-implication-call(|lang)> symbol

rules

  geninj-sig-to-strsig: CfSignature(sortname, None(), params@[_|_]) ->
    OpDecl(consname, FunType(str-paramsigs, ConstType(SortNoArgs(sortname))))
  with str-paramsigs := <map(geninj-param-to-strsig)> params
     ; consname  := <geninj-generate-inj-name> (sortname, params)

  geninj-param-to-strsig: Param(symbol, _) -> <geninj-symbol-to-strsig> symbol

  geninj-symbol-to-strsig: Sort(name)                   				  -> ConstType(SortNoArgs(name))
  geninj-symbol-to-strsig: Opt(symbol)                  				  -> ConstType(Sort("List", [<geninj-symbol-to-strsig> symbol])) // ConstType(Sort("Option", [<geninj-symbol-to-strsig> symbol]))
  geninj-symbol-to-strsig: Iter(symbol)                 				  -> ConstType(Sort("List", [<geninj-symbol-to-strsig> symbol]))
  geninj-symbol-to-strsig: IterSep(symbol, _)           				  -> ConstType(Sort("List", [<geninj-symbol-to-strsig> symbol]))
  geninj-symbol-to-strsig: IterStar(symbol)             				  -> ConstType(Sort("List", [<geninj-symbol-to-strsig> symbol]))
  geninj-symbol-to-strsig: IterStarSep(symbol, _)       				  -> ConstType(Sort("List", [<geninj-symbol-to-strsig> symbol]))
  geninj-symbol-to-strsig: Cf(symbol)                   				  -> <geninj-symbol-to-strsig> symbol
  geninj-symbol-to-strsig: Lex(symbol)                  				  -> <geninj-symbol-to-strsig> symbol
  geninj-symbol-to-strsig: Var(symbol)                  				  -> <geninj-symbol-to-strsig> symbol
  geninj-symbol-to-strsig: Varsym(symbol)               				  -> <geninj-symbol-to-strsig> symbol
  geninj-symbol-to-strsig: Label(_, symbol)             				  -> <geninj-symbol-to-strsig> symbol
  geninj-symbol-to-strsig: Alt(_, _)                    				  -> <errormsg(!"Alternative are not supported"); fail>
  geninj-symbol-to-strsig: CharClass(_)                 				  -> <errormsg(!"Character classes are not supported"); fail>
  geninj-symbol-to-strsig: CiLit(_)                     				  -> <errormsg(!"Literals are not supported"); fail>
  geninj-symbol-to-strsig: EOF()                        				  -> <errormsg(!"EOF is not supported"); fail>
  geninj-symbol-to-strsig: FileStart()                  				  -> <errormsg(!"Filestart is not supported"); fail>
  geninj-symbol-to-strsig: Lit(_)                       				  -> <errormsg(!"Literals are not supported"); fail>
  geninj-symbol-to-strsig: ParameterizedSort(_, _)      				  -> <errormsg(!"Parameterized sorts are not supported"); fail>
  geninj-symbol-to-strsig: Sequence(_, _)               				  -> <errormsg(!"Sequences are not supported"); fail>
  geninj-symbol-to-strsig: Start()                      				  -> <errormsg(!"Start is not supported"); fail>

rules

  geninj-symbol-to-explication-call(|lang): Sort(name)                    -> CallNoArgs(SVar($[explicate-injections-[lang]-[name]]))
  geninj-symbol-to-explication-call(|lang): Opt(symbol)                   -> Call(SVar("explicate-option"), [<geninj-symbol-to-explication-call(|lang)> symbol])
  geninj-symbol-to-explication-call(|lang): Iter(symbol)                  -> Call(SVar("map"), [<geninj-symbol-to-explication-call(|lang)> symbol])
  geninj-symbol-to-explication-call(|lang): IterSep(symbol, _)            -> Call(SVar("map"), [<geninj-symbol-to-explication-call(|lang)> symbol])
  geninj-symbol-to-explication-call(|lang): IterStar(symbol)              -> Call(SVar("map"), [<geninj-symbol-to-explication-call(|lang)> symbol])
  geninj-symbol-to-explication-call(|lang): IterStarSep(symbol, _)        -> Call(SVar("map"), [<geninj-symbol-to-explication-call(|lang)> symbol])
  geninj-symbol-to-explication-call(|lang): Cf(symbol)                    -> <geninj-symbol-to-explication-call(|lang)> symbol
  geninj-symbol-to-explication-call(|lang): Lex(symbol)                   -> <geninj-symbol-to-explication-call(|lang)> symbol
  geninj-symbol-to-explication-call(|lang): Var(symbol)                   -> <geninj-symbol-to-explication-call(|lang)> symbol
  geninj-symbol-to-explication-call(|lang): Varsym(symbol)                -> <geninj-symbol-to-explication-call(|lang)> symbol
  geninj-symbol-to-explication-call(|lang): Label(_, symbol)              -> <geninj-symbol-to-explication-call(|lang)> symbol
  geninj-symbol-to-explication-call(|lang): Alt(_, _)                     -> <errormsg(!"Alternative are not supported"); fail>
  geninj-symbol-to-explication-call(|lang): CharClass(_)                  -> <errormsg(!"Character classes are not supported"); fail>
  geninj-symbol-to-explication-call(|lang): CiLit(_)                      -> <errormsg(!"Literals are not supported"); fail>
  geninj-symbol-to-explication-call(|lang): EOF()                         -> <errormsg(!"EOF is not supported"); fail>
  geninj-symbol-to-explication-call(|lang): FileStart()                   -> <errormsg(!"Filestart is not supported"); fail>
  geninj-symbol-to-explication-call(|lang): Lit(_)                        -> <errormsg(!"Literals are not supported"); fail>
  geninj-symbol-to-explication-call(|lang): ParameterizedSort(_, _)       -> <errormsg(!"Parameterized sorts are not supported"); fail>
  geninj-symbol-to-explication-call(|lang): Sequence(_, _)                -> <errormsg(!"Sequences are not supported"); fail>
  geninj-symbol-to-explication-call(|lang): Start()                       -> <errormsg(!"Start is not supported"); fail>

  geninj-symbol-to-implication-call(|lang): Sort(name)                    -> CallNoArgs(SVar($[implicate-injections-[lang]-[name]]))
  geninj-symbol-to-implication-call(|lang): Opt(symbol)                   -> Call(SVar("implicate-option"), [<geninj-symbol-to-implication-call(|lang)> symbol])
  geninj-symbol-to-implication-call(|lang): Iter(symbol)                  -> Call(SVar("map"), [<geninj-symbol-to-implication-call(|lang)> symbol])
  geninj-symbol-to-implication-call(|lang): IterSep(symbol, _)            -> Call(SVar("map"), [<geninj-symbol-to-implication-call(|lang)> symbol])
  geninj-symbol-to-implication-call(|lang): IterStar(symbol)              -> Call(SVar("map"), [<geninj-symbol-to-implication-call(|lang)> symbol])
  geninj-symbol-to-implication-call(|lang): IterStarSep(symbol, _)        -> Call(SVar("map"), [<geninj-symbol-to-implication-call(|lang)> symbol])
  geninj-symbol-to-implication-call(|lang): Cf(symbol)                    -> <geninj-symbol-to-implication-call(|lang)> symbol
  geninj-symbol-to-implication-call(|lang): Lex(symbol)                   -> <geninj-symbol-to-implication-call(|lang)> symbol
  geninj-symbol-to-implication-call(|lang): Var(symbol)                   -> <geninj-symbol-to-implication-call(|lang)> symbol
  geninj-symbol-to-implication-call(|lang): Varsym(symbol)                -> <geninj-symbol-to-implication-call(|lang)> symbol
  geninj-symbol-to-implication-call(|lang): Label(_, symbol)              -> <geninj-symbol-to-implication-call(|lang)> symbol
  geninj-symbol-to-implication-call(|lang): Alt(_, _)                     -> <errormsg(!"Alternative are not supported"); fail>
  geninj-symbol-to-implication-call(|lang): CharClass(_)                  -> <errormsg(!"Character classes are not supported"); fail>
  geninj-symbol-to-implication-call(|lang): CiLit(_)                      -> <errormsg(!"Literals are not supported"); fail>
  geninj-symbol-to-implication-call(|lang): EOF()                         -> <errormsg(!"EOF is not supported"); fail>
  geninj-symbol-to-implication-call(|lang): FileStart()                   -> <errormsg(!"Filestart is not supported"); fail>
  geninj-symbol-to-implication-call(|lang): Lit(_)                        -> <errormsg(!"Literals are not supported"); fail>
  geninj-symbol-to-implication-call(|lang): ParameterizedSort(_, _)       -> <errormsg(!"Parameterized sorts are not supported"); fail>
  geninj-symbol-to-implication-call(|lang): Sequence(_, _)                -> <errormsg(!"Sequences are not supported"); fail>
  geninj-symbol-to-implication-call(|lang): Start()                       -> <errormsg(!"Start is not supported"); fail>

rules

  // TODO: Move these generic rules somewhere else, rather than generating them for every file

  geninj-explicate-generic-rules: _ -> [
    // explicate-option(s) = origin-track-forced(\
    //   None() -> []
    // \)
    SDef($[explicate-option],
      [DefaultVarDec("s")],
      <origin-preserving-rule> RuleNoCond(
        AnnoList(Op("None", []), [Var(ListVar("anno*"))]),
        AnnoList(List([]), [Var(ListVar("anno*"))])
      )
    ),
    // explicate-option(s) = origin-track-forced(\
    //  Some(t) -> [<s> t]
    // \)
    SDef($[explicate-option],
      [DefaultVarDec("s")],
      <origin-preserving-rule> RuleNoCond(
        AnnoList(Op("Some", [Var("t")]), [Var(ListVar("anno*"))]),
        AnnoList(List([App(CallNoArgs(SVar("s")), Var("t"))]), [Var(ListVar("anno*"))])
      )
    )
  ]

  geninj-implicate-generic-rules: _ -> [
    // implicate-option(s) = origin-track-forced(\
    //   [] -> None()
    // \)
    SDef($[implicate-option],
      [DefaultVarDec("s")],
      <origin-preserving-rule> RuleNoCond(
        AnnoList(List([]), [Var(ListVar("anno*"))]),
        AnnoList(Op("None", []), [Var(ListVar("anno*"))])
      )
    ),
    // implicate-option(s) = origin-track-forced(\
    //   [t] -> Some(<s> t)
    // \)
    SDef($[implicate-option],
      [DefaultVarDec("s")],
      <origin-preserving-rule> RuleNoCond(
        AnnoList(List([Var("t")]), [Var(ListVar("anno*"))]),
        AnnoList(Op("Some", [App(CallNoArgs(SVar("s")), Var("t"))]), [Var(ListVar("anno*"))])
      )
    ),
    // implicate-option(s) = origin-track-forced(\
    //   [_, _|_] -> <fatal-err(|"Cannot implicate multi-element list to option.")>
    // \)
    SDef($[implicate-option],
      [DefaultVarDec("s")],
      <origin-preserving-rule> RuleNoCond(
        ListTail([Wld(), Wld()], Wld()),
        RootApp(CallT(SVar("fatal-err"), [], [NoAnnoList(Str("\"Cannot implicate multi-element list to option.\""))]))
      )
    )
  ]
