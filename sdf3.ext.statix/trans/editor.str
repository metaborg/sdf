module editor

imports
  signatures/aliases/-
  signatures/aterms/-
  signatures/basic/-
  signatures/characterclass/-
  signatures/constants/-
  signatures/grammar/-
  signatures/kernel/-
  signatures/labels/-
  signatures/layout/-
  signatures/layout-constraints/-
  signatures/lifting/-
  signatures/literals/-
  signatures/modules/-
  signatures/priority/-
  signatures/regular/-
  signatures/renaming/-
  signatures/restrictions/-
  signatures/sdf2-core/-
  signatures/sorts/-
  signatures/symbols/-
  signatures/TemplateLang-sig

imports
  analysis/desugar
  generate-statix
  generate-stratego
  pp/StatixLang-pp
  pp/StatixLang-parenthesize
  pp/statix/lang/-
  statix/runtime/pp
  libstrc
  libstratego-aterm
  libstratego-gpp

rules

  generate-all:
    input@(selected, position, ast, path, project-path) -> result
    where filename := <base-filename> path
        ; ast'     := <desugar-templates> ast
        ; <?Module(Unparameterized(mn), _, sections)> ast
    where (_, statix-string)      := <generate-statix> input
        ; statix-filename         := <get-src-gen(|project-path, "statix/signatures", "-sig.stx")> mn
        ; statix-result           := (statix-filename, statix-string)
    where (_, stratego-string)    := <generate-stratego> input
        ; stratego-filename       := <get-src-gen(|project-path, "injections", "-injections.str")> mn
        ; stratego-result         := (stratego-filename, stratego-string)
    where result := <unzip> [
            statix-result,
            stratego-result
          ]


  generate-statix:
    input@(_, _, ast, _, project-path) -> (filename, result)
    where <?Module(Unparameterized(mn), _, _)> ast
        ; filename      := <get-src-gen(|project-path, "statix/signatures", "-sig.stx")> mn
        ; (_, output)   := <generate-statix-abstract> input
        ; result        := <pp-statix-to-string <+ !""; debug(!"Pretty-printing failed; the Statix file could not be generated. Try Reset and Reanalyze or check for unresolved references.\n"); fail> output

  generate-statix-abstract:
    (selected, position, ast, path, project-path) -> (filename, result)
    where <?Module(Unparameterized(m), _, sections)> ast
        ; m' := <strip-annos; string-tokenize(|['/']); last> m
        ; <base-filename; remove-extension; ?m' <+ debug(!"Module name does not correspond to file name. The Statix file could not be generated.\n"); fail> path
    where <?Module(Unparameterized(mn), _, _)> ast
        ; selected'     := <desugar-templates> selected
        ; result        := <geninj-generate-statix> selected'
        ; filename      := <get-src-gen(|project-path, "statix/signatures", "-sig.stx.aterm")> mn



  generate-stratego:
    input@(_, _, ast, _, project-path) -> (filenames, results)
    where <?Module(Unparameterized(mn), _, _)> ast
        ; filename1     := <get-src-gen(|project-path, "injections", "-injections.str")> mn
        ; filename2     := <get-src-gen(|project-path, "injections", "-injections.str2")> mn
        ; (_, outputs)  := <generate-stratego-abstract> input
        ; results       := <map(pp-stratego-string <+ !""; debug(!"Pretty-printing failed; the Stratego file could not be generated. Try Reset and Reanalyze or check for unresolved references.\n"); fail)> outputs
        ; filenames     := [filename1, filename2]

  generate-stratego-abstract:
    (selected, position, ast, path, project-path) -> ([filename1, filename2], [result1, result2])
    where <?Module(Unparameterized(m), _, sections)> ast
         ; m' := <strip-annos; string-tokenize(|['/']); last> m
         ; <base-filename; remove-extension; ?m' <+ debug(!"Module name does not correspond to file name. The Stratego file could not be generated.\n"); fail> path
    where <?Module(Unparameterized(mn), _, _)> ast
        ; selected'     := <desugar-templates> selected
        ; result1       := <geninj-generate-stratego(|"1")> selected'
        ; filename1     := <get-src-gen(|project-path, "injections", "-injections.str.aterm")> mn
        ; result2       := <geninj-generate-stratego(|"2")> selected'
        ; filename2     := <get-src-gen(|project-path, "injections", "-injections.str2.aterm")> mn



  pp-statix-to-string = pp-Statix-string(prettyprint-Statix-start-symbols)

  get-src-gen(|project-path, folder, ext):
    filename -> filename'
    with
      fn := <get-filename> filename;
      src-gen-path := <concat-strings> [project-path, "/src-gen"];
      src-gen-folder := <concat-strings> [src-gen-path, "/" ,folder];
      file-folder := <get-dir(|src-gen-folder)> filename ;
      filename' := <concat-strings> [file-folder, "/" , fn, ext]


  get-dir(|path) :
    s -> s'
    with
      names := <strip-annos; string-tokenize(|['/'])> s;
      names' := <at-last(![])> names;
      if [h | tl] := names'
      then
        s' := <concat-strings> [path, "/",  <separate-by(|"/"); concat-strings> names']
      else
        s' := path
      end


  get-filename :
    s -> s'
    with
      names := <strip-annos; string-tokenize(|['/'])> s;
      s' := <last> names