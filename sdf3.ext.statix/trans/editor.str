module editor

imports
  signatures/aliases/-
  signatures/aterms/-
  signatures/basic/-
  signatures/characterclass/-
  signatures/constants/-
  signatures/grammar/-
  signatures/kernel/-
  signatures/labels/-
  signatures/layout/-
  signatures/layout-constraints/-
  signatures/lifting/-
  signatures/literals/-
  signatures/modules/-
  signatures/priority/-
  signatures/regular/-
  signatures/renaming/-
  signatures/restrictions/-
  signatures/sdf2-core/-
  signatures/sorts/-
  signatures/symbols/-
  signatures/TemplateLang-sig

imports
  analysis/desugar
  generate-statix
  generate-stratego
  pp/StatixLang-pp
  pp/StatixLang-parenthesize
  pp/statix/lang/-
  statix/runtime/pp
  libstrc
  libstratego-aterm
  libstratego-gpp

rules

  // Whenever this strategy succeeds, generating the file (on-save) is skipped.
  // Instead, a text file is generated with the output of this strategy as a comment.
  should-skip:
    input@(_, _, ast, _, _) -> "Skipped because module name ends with `_StrategoMix`."
    where <?Module(Unparameterized(mn), _, _)> ast
        ; <string-ends-with(|"_StrategoMix")> mn


  // Called when using the menu item
  generate-all:
    input@(selected, position, ast, path, project-path) -> results
    with  <?Module(Unparameterized(mn), _, _)> ast
    with  statix-results   := <generate-statix> input
    with  stratego-results := <generate-stratego> input
    with  results := <unzip; (concat, concat)> [
            statix-results,
            stratego-results
          ]
          ; <debug(!"Results: ")> results


  generate-statix:
    input@(_, _, ast, _, project-path) -> ([filename], [result'])
    with  <?Module(Unparameterized(mn), _, _)> ast
        ; ([_], [output]) := <generate-statix-abstract> input
    with  filename        := <get-src-gen(|project-path, "statix/signatures", "-sig.stx")> mn
        ; result          := <pp-statix-to-string <+ !""; debug(!"Pretty-printing failed; the Statix file could not be generated. Try Reset and Reanalyze or check for unresolved references.\n"); fail> output
        ; result'         := <prepend-comment(should-skip)> (input, result)

  generate-statix-abstract:
    (selected, position, ast, path, project-path) -> ([filename], [result])
    with  <?Module(Unparameterized(m), _, sections)> ast
        ; m'              := <strip-annos; string-tokenize(|['/']); last> m
        ; <base-filename; remove-extension; ?m' <+ debug(!"Module name does not correspond to file name. The Statix file could not be generated.\n"); fail> path
    with  <?Module(Unparameterized(mn), _, _)> ast
        ; selected'       := <desugar-templates> selected
    with  filename        := <get-src-gen(|project-path, "statix/signatures", "-sig.stx.aterm")> mn
        ; result          := <geninj-generate-statix> selected'



  generate-stratego:
    input@(_, _, ast, _, project-path) -> ([str1_filename, str2_filename], [str1_result', str2_result'])
    with  <?Module(Unparameterized(mn), _, _)> ast
        ; ([_, _], [str1_output, str2_output])  := <generate-stratego-abstract> input
    with  str1_filename   := <get-src-gen(|project-path, "injections", "-injections.str")> mn
        ; str1_result     := <pp-stratego-string <+ !""; debug(!"Pretty-printing failed; the Stratego 1 file could not be generated. Try Reset and Reanalyze or check for unresolved references.\n"); fail> str1_output
        ; str1_result'    := <prepend-comment(should-skip)> (input, str1_result)
    with  str2_filename   := <get-src-gen(|project-path, "injections", "-injections.str2")> mn
        ; str2_result     := <pp-stratego-string <+ !""; debug(!"Pretty-printing failed; the Stratego 2 file could not be generated. Try Reset and Reanalyze or check for unresolved references.\n"); fail> str2_output
        ; str2_result'    := <prepend-comment(should-skip)> (input, str2_result)

  generate-stratego-abstract:
    (selected, position, ast, path, project-path) -> ([str1_filename, str2_filename], [str1_result, str2_result])
    with  <?Module(Unparameterized(m), _, sections)> ast
        ; m'              := <strip-annos; string-tokenize(|['/']); last> m
        ; <base-filename; remove-extension; ?m' <+ debug(!"Module name does not correspond to file name. The Stratego file could not be generated.\n"); fail> path
    with  <?Module(Unparameterized(mn), _, _)> ast
        ; selected'       := <desugar-templates> selected
    with  str1_filename   := <get-src-gen(|project-path, "injections", "-injections.str.aterm")> mn
        ; str1_result     := <geninj-generate-stratego(|"1")> selected'
    with  str2_filename   := <get-src-gen(|project-path, "injections", "-injections.str2.aterm")> mn
        ; str2_result     := <geninj-generate-stratego(|"2")> selected'


  /**
   * Prepends the result of the specified strategy to the specified source code using `//` as the comment character,
   * but does not modify the source code when the strategy fails.
   */
  prepend-comment(s): a@(input, code) -> code'
  where code' := <s < (<concat-strings> ["// ", <id>, "\n", code]) + !code> input

  /**
   * Pretty-print statix.
   */
  pp-statix-to-string = pp-Statix-string(prettyprint-Statix-start-symbols)

  /**
   * Constructs a path to a subfolder of the src-gen/ directory
   * with a given extension, based on the original `project-path`.
   *
   * @param project-path the original project path
   * @param folder the new subfolder of the sec-gen/ directory
   * @param ext the new extension of the filename
   * @return the constructed path to the filename with the specified extension
   *   in the specified subfolder of the src-gen/ directory
   */
  get-src-gen(|project-path, folder, ext): filename -> filename'
    with fn                := <get-filename> filename
       ; src-gen-path      := <concat-strings> [project-path, "/src-gen"]
       ; src-gen-folder    := <concat-strings> [src-gen-path, "/", folder]
       ; file-folder       := <get-dir(|src-gen-folder)> filename
       ; filename'         := <concat-strings> [file-folder, "/", fn, ext]

  get-dir(|path): s -> s'
    with names  := <strip-annos; string-tokenize(|['/'])> s
       ; names' := <at-last(![])> names
       ; if [h | tl] := names'
         then
           s' := <concat-strings> [path, "/",  <separate-by(|"/"); concat-strings> names']
         else
           s' := path
         end

  get-filename: s -> s'
    with names := <strip-annos; string-tokenize(|['/'])> s
       ; s' := <last> names
