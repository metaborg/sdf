module generate-statix

imports
  libstratego-lib
  libstrc
  analysis/types
  runtime/nabl/-
  runtime/task/-
  runtime/types/-
  signatures/statix/-
  pp/statix/-
  pp/statix/lang/-

imports
  common
  utils

imports
  signatures/aliases/-
  signatures/aterms/-
  signatures/basic/-
  signatures/characterclass/-
  signatures/constants/-
  signatures/grammar/-
  signatures/kernel/-
  signatures/labels/-
  signatures/layout/-
  signatures/layout-constraints/-
  signatures/lifting/-
  signatures/literals/-
  signatures/modules/-
  signatures/priority/-
  signatures/regular/-
  signatures/renaming/-
  signatures/restrictions/-
  signatures/sdf2-core/-
  signatures/sorts/-
  signatures/symbols/-
  signatures/TemplateLang-sig

rules

  // geninj-generate-statix :: SDF3.Module -> Statix.Module
  geninj-generate-statix =
    strip-annos; geninj-module-to-sig


  // geninj-module-to-sig :: SDF3.Module -> Statix.Module
  geninj-module-to-sig:
    Module(modname, imports, sections) -> Module(modname', [
      Imports(imports'),
      Signature([
        Sorts(stx-sorts),
        Constructors(stx-plhdr-sorts)
      ]),
      Signature([Constructors(stx-sigs)])
    ])
  with modname'         := $[signatures/[<?Unparameterized(<id>)> modname]-sig]
     ; imports'         := <flatmap(geninj-imports-to-stx-imports(|"-sig", "signatures"))> imports
     // Collect CF and LEX sorts
     ; allsorts         := <geninj-sections-to-sorts> sections
     // Collect signatures
     ; allsigs          := <geninj-sections-to-signatures> sections
     // Statix sorts
     ; stx-sorts        := <flatfilter(geninj-sort-to-stxsort)> allsorts
     ; stx-plhdr-sorts  := <flatfilter(geninj-sort-to-stxsig)> allsorts
     // Statix signatures
     ; stx-sigs         := <flatfilter(geninj-sig-to-stxsig)> allsigs

rules

  // stx-to-str-import :: SDF3.ImpSection -> [Statix.Import]
  geninj-imports-to-stx-imports(|ext, folder):
    Imports(imports) -> <map(!Import(<geninj-modulename-to-stx-importname(|ext, folder)>))> imports


  // stx-to-module-name(|string, string) :: SDF3.Import -> string
  geninj-modulename-to-stx-importname(|ext, folder):
    Module(Unparameterized(m)) -> <conc-strings> (folder, "/" , m, ext)


rules

  // geninj-lexsort-to-stxsort :: ExtSort -> Statix.SortDecl
  geninj-sort-to-stxsort: LexSort(sortname) ->
    SortAlias(sortname, StringSort())

  geninj-sort-to-stxsort: CfSort(sortname) ->
    SortDecl(sortname)

rules

  geninj-sig-to-stxsig: CfSignature(sortname, None(), params@[_|_]) ->
    OpDecl(consname, op)
  with consname := <geninj-generate-inj-name> (sortname, params)
     ; stx-paramsigs := <map(geninj-param-to-stxsig)> params
     ; op := <geninj-stxparamsigs-to-op(|sortname)> stx-paramsigs


  geninj-sig-to-stxsig: CfSignature(sortname, Some(consname), params) -> OpDecl(consname, op)
  with stx-paramsigs := <map(geninj-param-to-stxsig)> params
     ; op := <geninj-stxparamsigs-to-op(|sortname)> stx-paramsigs

  geninj-sort-to-stxsig: CfSort(sortname)  -> OpDecl($[[sortname]-Plhdr], ConstOp(SimpleSort(sortname)))

rules

  geninj-stxparamsigs-to-op(|sortname): [] -> ConstOp(SimpleSort(sortname))
  geninj-stxparamsigs-to-op(|sortname): sigs@[_|_] -> ArrowOp(sigs, SimpleSort(sortname))

  geninj-param-to-stxsig: Param(symbol, _) -> <geninj-symbol-to-stxsig> symbol

  // geninj-symbol-to-stxsig :: SDF3.Symbol             -> Statix.SortRef
  geninj-symbol-to-stxsig: Sort(name)                   -> SimpleSort(name)
  geninj-symbol-to-stxsig: Opt(symbol)                  -> <debug(!"ERROR: Optional sorts are not supported by Statix: "); fail> //OptSort(<geninj-symbol-to-stxsig> symbol)
  geninj-symbol-to-stxsig: Iter(symbol)                 -> ListSort(<geninj-symbol-to-stxsig> symbol)
  geninj-symbol-to-stxsig: IterSep(symbol, _)           -> ListSort(<geninj-symbol-to-stxsig> symbol)
  geninj-symbol-to-stxsig: IterStar(symbol)             -> ListSort(<geninj-symbol-to-stxsig> symbol)
  geninj-symbol-to-stxsig: IterStarSep(symbol, _)       -> ListSort(<geninj-symbol-to-stxsig> symbol)
  geninj-symbol-to-stxsig: Cf(symbol)                   -> <geninj-symbol-to-stxsig> symbol
  geninj-symbol-to-stxsig: Lex(symbol)                  -> <geninj-symbol-to-stxsig> symbol
  geninj-symbol-to-stxsig: Var(symbol)                  -> <geninj-symbol-to-stxsig> symbol
  geninj-symbol-to-stxsig: Varsym(symbol)               -> <geninj-symbol-to-stxsig> symbol
  geninj-symbol-to-stxsig: Label(_, symbol)             -> <geninj-symbol-to-stxsig> symbol
  geninj-symbol-to-stxsig: Alt(_, _)                    -> <debug(!"ERROR: Alternative are not supported. "); fail>
  geninj-symbol-to-stxsig: CharClass(_)                 -> <debug(!"ERROR: Character classes are not supported. "); fail>
  geninj-symbol-to-stxsig: CiLit(_)                     -> <debug(!"ERROR: Literals are not supported. "); fail>
  geninj-symbol-to-stxsig: EOF()                        -> <debug(!"ERROR: EOF is not supported. "); fail>
  geninj-symbol-to-stxsig: FileStart()                  -> <debug(!"ERROR: Filestart is not supported. "); fail>
  geninj-symbol-to-stxsig: Lit(_)                       -> <debug(!"ERROR: Literals are not supported. "); fail>
  geninj-symbol-to-stxsig: ParameterizedSort(_, _)      -> <debug(!"ERROR: Parameterized sorts are not supported. "); fail>
  geninj-symbol-to-stxsig: Sequence(_, _)               -> <debug(!"ERROR: Sequences are not supported. "); fail>
  geninj-symbol-to-stxsig: Start()                      -> <debug(!"ERROR: Start is not supported. "); fail>
