module templatelang

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  libstratego-sglr
  libstrc
  include/TemplateLang
  include/TemplateLang-parenthesize
  editor/TemplateLang-Outliner
  lib/EditorService
  lib/editor-common.generated
  lib/runtime/analysis/-
  lib/runtime/nabl/-
  lib/runtime/task/-
  lib/runtime/index/-
  lib/runtime/properties/-
  lib/runtime/types/-
  lib/runtime/editor/-
     
  src-gen/names/analysis/-
  src-gen/types/analysis/-
  
  trans/analysis/-
  trans/generation/-
  trans/editor/-
	//analyze
	//names
	//name-desugar
//	name-check
	//check
    
rules // Analysis
  
  // topdown(where(try(debug(!$[[<(origin-offset; write-to-string) <+ !"NO ORIGINS">][" "]]))))
  
  editor-analyze = analysis-default-editor
  
  analysis-single-default-interface = 
  	//analysis-single-default(analyze; name-sugar-all, name-desugar-all, id|<language>)
  	analysis-single-default(normalization, id, id|<language>)
  	
  analysis-multiple-default-interface = 
  	//analysis-multiple-default(parse-file <+ !(), analyze; name-sugar-all, name-desugar-all, id|<language>, <project-path>)
  analysis-multiple-default(parse-file <+ !(), normalization, id, id|<language>, <project-path>)
  
  editor-save =  generate-all//analysis-save-default(|<language>); generate-all 
      
rules // Editor services

  editor-resolve:
    (node, position, ast, path, project-path) -> definition
    where
    	definition := <analysis-resolve(|<language>, project-path, path)> node
  
  editor-complete:
    (node, position, ast, path, project-path) -> proposals
    where
    	proposals := <analysis-propose-completions(|<language>, project-path, path)> ast
    	
  editor-outline:
    (node, position, ast, path, project-path) -> outline
    where
      outline := <outline> ast

rules // Debugging
  
  debug-show-aterm:
    (selected, position, ast, path, project-path) -> (filename, selected)
    with
      filename := <guarantee-extension(|"aterm")> path

  debug-show-desugared:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"desugared.aterm")> path;
      result   := <desugar-templates> selected
      
  debug-show-analyzed:
    (selected, position, ast, path, project-path) -> (filename, selected)
    with
      filename := <guarantee-extension(|"analyzed.aterm")> path

	debug-index-project =
		analysis-debug-index-project(|<language>)
	debug-index-partition =
		analysis-debug-index-partition(|<language>)

	debug-task-project =
		analysis-debug-task-project(|<language>)
	debug-task-partition =
		analysis-debug-task-partition(|<language>)
	debug-task-selection =
		analysis-debug-task-selection(|<language>)
		
	debug-project =
		analysis-debug-project(|<language>)
	debug-partition =
		analysis-debug-partition(|<language>)
		
	debug-reanalyze = 
		analysis-debug-reanalyze(|<language>)
		
  // analysis-default-debug-interface(msg) = debug(msg)
  // analysis-default-debug-interface = debug

rules

 
  // When given a tuple (path, string) this writes string into path.
  write-string-to-file =
  	?(filename, string);
  	if <dirname; readdir> filename then
	    with(
	      handle := <fopen> (filename, "w");
	      <fputs> (string, handle);
	      <fclose> handle;
	      <refresh-workspace-file> filename
	    )
	  end
