module editor/build-all

imports
  signatures/aliases/-
  signatures/aterms/-
  signatures/basic/-
  signatures/characterclass/-
  signatures/constants/-
  signatures/grammar/-
  signatures/kernel/-
  signatures/labels/-
  signatures/layout/-
  signatures/layout-constraints/-
  signatures/lifting/-
  signatures/literals/-
  signatures/modules/-
  signatures/priority/-
  signatures/regular/-
  signatures/renaming/-
  signatures/restrictions/-
  signatures/sdf2-core/-
  signatures/sorts/-
  signatures/symbols/-
  signatures/TemplateLang-sig  
  
imports
  analysis/desugar
  editor/build-utils
  generation/completion/-
  generation/pp/-
  generation/signatures/-
  generation/syntax/-  
  generation/syntax/to-namespaced
  libstrc
  normalization/to-normal-form
  libstratego-aterm
  
rules 
  check-sdf2table = prim("SSL_EXT_check_sdf2_table") <+ !"unknown"
  

rules 

// On-save handler
  generate-all:
    (selected, position, ast, path, project-path) -> None()
    where
      filename := <base-filename> path;
      ast'     := <desugar-templates> ast;
      <?Module(Unparameterized(mn), i*, sections)> ast
    where
      esv-cc-filename         := <create-src-gen(|project-path, "completion/colorer" ,"-cc-esv.esv")> mn;
      esv-cc-ast              := <module-to-cmp-colorer; pp-esv-to-string <+ !""; debug(!"ESV files could not be generated. Try Reset and Reanalyze or check for unresolved references.\n"); fail> ast';
      <write-string-to-file> (esv-cc-filename, esv-cc-ast)   
    where
      ncp-ast              := <module-to-new-cmp; pp-stratego-string <+ !""; debug(!"New Completions files could not be generated. Try Reset and Reanalyze or check for unresolved references.\n"); fail> ast';
      ncp-filename         := <create-src-gen(|project-path, "completion", "-cp.str")> mn;
      <write-string-to-file> (ncp-filename, ncp-ast)             
    where
      sig-ast              := <module-to-sig; pp-stratego-string <+ !""; debug(!"Signature files could not be generated. Try Reset and Reanalyze or check for unresolved references.\n"); fail> ast';
      sig-filename         := <create-src-gen(|project-path, "signatures", "-sig.str")> mn;
      <write-string-to-file> (sig-filename, sig-ast)
    where
      ds-sig-ast           := <module-to-ds-sig; pp-ds-to-string  <+ !""; debug(!"The ds signature file could not be generated. Try Reset and Reanalyze or check for unresolved references.\n"); fail> ast';
      ds-sig-filename      := <create-src-gen(|project-path, "ds-signatures", "-sig.ds")> mn;
      <write-string-to-file> (ds-sig-filename, ds-sig-ast)
    where
    version             := <check-sdf2table>;
      if <?"disabled" <+ ?"mixin-grammar"> version then
        // regular table     
        norm-filename       := <create-src-gen(|project-path, "syntax/normalized",  "-norm.aterm")> mn;
        norm-ast            := <module-to-permissive; to-normal-form(|$[[project-path]/[<dirname> path]])> ast';
        <write-string-to-file> (norm-filename, <aterm-escape-strings; pp-aterm> norm-ast);
        
        // completions table 
        sdf-completions-filename         := <create-src-gen(|project-path, "syntax/normalized/completion", "-completion-insertions-norm.aterm")> mn;
        sdf-completions-ast              := <module-to-sdf3-completions; to-normal-form(|$[[project-path]/[<dirname> path]]) <+ !""; debug(!"SDF completion files could not be generated.\n"); fail > ast';
        <write-string-to-file> (sdf-completions-filename, <aterm-escape-strings; pp-aterm> sdf-completions-ast);  
        
        chars                := <collect-one(?Tokenize(<id; explode-string; un-double-quote-chars>)) <+ !['(', ')']> sections;
        newline              := <collect-one(?Newlines(<id>)) <+ !None()> sections;
        kfr                  := <collect-one(?KeywordFollowRestriction(<id; term-translation>)) <+ !None()> sections;
        kattrs               := <collect-one(?KeywordAttributes(_, _)) <+ !None()> sections;
        sdf-filename         := <create-src-gen(|project-path, "syntax", ".sdf")> mn;
        sdf-ast              := <to-sdf(|chars, newline, kfr, kattrs); pp-sdf-to-string <+ !""; debug(!"SDF files could not be generated.\n"); fail > ast';
        <write-string-to-file> (sdf-filename, sdf-ast);
          
        // to completions table from sdf2table
        sdf-completions-sdf2table-filename         := <create-src-gen(|project-path, "syntax/completion", "-completion-insertions.sdf")> mn;
        sdf-completions-sdf2table-ast              := <module-to-sdf-completions; pp-sdf-to-string  <+ !""; debug(!"SDF completion files could not be generated.\n"); fail > ast';
        <write-string-to-file> (sdf-completions-sdf2table-filename, sdf-completions-sdf2table-ast)
      else if <?"java" <+ ?"dynamic" <+ ?"incremental"> version then
          // regular table     
          norm-filename       := <create-src-gen(|project-path, "syntax/normalized",  "-norm.aterm")> mn;
          norm-ast            := <module-to-permissive; to-normal-form(|$[[project-path]/[<dirname> path]])> ast';
          <write-string-to-file> (norm-filename, <aterm-escape-strings; pp-aterm> norm-ast);
          
          // completions table 
          sdf-completions-filename         := <create-src-gen(|project-path, "syntax/normalized/completion", "-completion-insertions-norm.aterm")> mn;
          sdf-completions-ast              := <module-to-sdf3-completions; to-normal-form(|$[[project-path]/[<dirname> path]]) <+ !""; debug(!"SDF completion files could not be generated.\n"); fail > ast';
          <write-string-to-file> (sdf-completions-filename, <aterm-escape-strings; pp-aterm> sdf-completions-ast)  
        else
          	chars                := <collect-one(?Tokenize(<id; explode-string; un-double-quote-chars>)) <+ !['(', ')']> sections;
        		newline              := <collect-one(?Newlines(<id>)) <+ !None()> sections;
          	kfr                  := <collect-one(?KeywordFollowRestriction(<id; term-translation>)) <+ !None()> sections;
          	kattrs               := <collect-one(?KeywordAttributes(_, _)) <+ !None()> sections;
          	sdf-filename         := <create-src-gen(|project-path, "syntax", ".sdf")> mn;
          	sdf-ast              := <to-sdf(|chars, newline, kfr, kattrs); pp-sdf-to-string <+ !""; debug(!"SDF files could not be generated.\n"); fail > ast';
          	<write-string-to-file> (sdf-filename, sdf-ast);
  	      
          // to completions table from sdf2table
          sdf-completions-filename         := <create-src-gen(|project-path, "syntax/completion", "-completion-insertions.sdf")> mn;
          sdf-completions-ast              := <module-to-sdf-completions; pp-sdf-to-string  <+ !""; debug(!"SDF completion files could not be generated.\n"); fail > ast';
          <write-string-to-file> (sdf-completions-filename, sdf-completions-ast)
        end  
      end
    where
        pp-ast               := <module-to-pp; pp-stratego-string <+ !""; debug(!"PP files could not be generated. Try Reset and Reanalyze or check for unresolved references.\n"); fail> ast'
      ; pp-filename          := <create-src-gen(|project-path, "pp", "-pp.str")> mn;
        <write-string-to-file> (pp-filename, pp-ast)  
     
