module editor/build-syntax

imports 
  signatures/TemplateLang-sig
  signatures/modules/Modules-sig
  analysis/desugar
  editor/build-utils
  generation/syntax/to-sdf
  generation/syntax/make-permissive
  normalization/to-normal-form
  trans/pp 
  generation/syntax/to-namespaced 
  generation/syntax/gen-exp-grammars
  
rules 
  get-contextual-grammar = prim("SSL_EXT_get_contextual_grammar", <id>) <+ "file not found"
  
rules
  generate-sdf-abstract:
    (selected, position, ast, path, project-path) -> (filename, result)
    where
      <?Module(Unparameterized(m), i*, sections)> ast ;
      m' := <strip-annos; string-tokenize(|['/']); last> m;
        <base-filename; remove-extension; ?m' <+ debug(!"Module name does not correspond to file name. The sdf file could not be generated.\n"); fail> path
    with
      <?Module(Unparameterized(mn), i*, sections)> ast ;
      chars := <collect-one(?Tokenize(<id; explode-string; un-double-quote-chars>)) <+ !['(', ')']> sections;
      newline := <collect-one(?Newlines(<id>)) <+ !None()> sections;
      kfr := <collect-one(?KeywordFollowRestriction(<id; term-translation>)) <+ !None()> sections;
      kattrs:= <collect-one(?KeywordAttributes(_, _)) <+ !None()> sections;
      selected'     := <desugar-templates> selected;
      //selected' := selected ;
      filename := <create-src-gen(|project-path, "syntax",  ".sdf.aterm")> mn;
      result := <to-sdf(|chars, newline, kfr, kattrs)> selected'

  generate-sdf-concrete:
    (selected, position, ast, path, project-path) -> (filename, result)
   where
      <?Module(Unparameterized(m), i*, sections)> ast ;
      m' := <strip-annos; string-tokenize(|['/']); last> m;
        <base-filename; remove-extension; ?m' <+ debug(!"Module name does not correspond to file name. The sdf file could not be generated.\n"); fail> path
   where
       <?Module(Unparameterized(mn), i*, sections)> ast ;
      chars := <collect-one(?Tokenize(<id; explode-string; un-double-quote-chars>)) <+ !['(', ')']> sections;
      newline := <collect-one(?Newlines(<id>)) <+ !None()> sections;
      kfr := <collect-one(?KeywordFollowRestriction(<id; term-translation>)) <+ !None()> sections;
      kattrs:= <collect-one(?KeywordAttributes(_, _)) <+ !None()> sections;
      selected'     := <desugar-templates> selected;
      filename := <create-src-gen(|project-path, "syntax", ".sdf")> mn;
      result   := <to-sdf(|chars, newline, kfr, kattrs); pp-sdf-to-string <+ !""; debug(!"The sdf file could not be generated.\n"); fail> selected'
  
   generate-permissive-abstract:
    (selected, position, ast, path, project-path) -> (filename, result)
    where
        <?Module(Unparameterized(mn), i*, sections)> ast ;
        filename := <create-src-gen(|project-path, "syntax/permissive" ,"-permissive.aterm")> mn;
        ast'     := <desugar-templates> selected;
        result := <module-to-permissive-productions> ast'
  
  generate-permissive-concrete:
    (selected, position, ast, path, project-path) -> (filename, result)
    where
        <?Module(Unparameterized(mn), i*, sections)> ast ;
        filename := <create-src-gen(|project-path, "syntax/permissive" ,"-permissive.sdf3")> mn;
        ast'     := <desugar-templates> selected;
        result   := <module-to-permissive-productions; pp-SDF3-string> ast'    
        
  sdf3-to-namespaced:
    (selected, position, ast, path, project-path) -> None()
    where 
      <?Module(Unparameterized(mn), i*, sections)> ast ;
      dirname := <dirname> path;
      if <not(is-substring(!"namespaced"))> dirname then
	      norm-namespaced-filename       := <concat-strings> [project-path, "/syntax/namespaced/", mn, "-namespaced.sdf3"];
	      norm-namespaced-ast            := <module-to-namespaced> ast;
	      <write-string-to-file> (norm-namespaced-filename, <pp-SDF3-string> norm-namespaced-ast)
      end 
      
  sdf3-to-exp-grammars:
    (selected, position, ast, path, project-path) -> None()
    where 
      exp-grammars := <module-to-exp-grammars(|project-path, path)> ast;
      <map(generate-exp-grammar-file(|project-path))> exp-grammars
  
  generate-exp-grammar-file(|project-path):
    (mn, ast) -> None()
    where
      exp-grammar-filename := <create-src-gen(|project-path, "syntax/exp-grammars",  ".sdf3_")> mn;
      <write-string-to-file> (exp-grammar-filename, <pp-SDF3-string> ast)
         
  sdf3-to-normal-form:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
    <?Module(Unparameterized(mn), i*, sections)> ast ;
    filename := <create-src-gen(|project-path, "syntax/normalized",  "-norm.sdf3_")> mn;
    result   := <to-normal-form(|$[[project-path]/[<dirname> path]]); pp-SDF3-string> selected  
    
  sdf3-to-normal-form-abstract:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
    <?Module(Unparameterized(mn), i*, sections)> ast ;
    filename := <create-src-gen(|project-path, "syntax/normalized",  "-norm.aterm")> mn;
    result   := <to-normal-form(|$[[project-path]/[<dirname> path]])> selected      
         
  read-contextual-grammar-abstract:
    (selected, position, ast, path, project-path) -> (filename, result)
   where
   <debug(!"project-path ")> project-path;
   ctx-ast      := <get-contextual-grammar> project-path; 
   filename     := <create-src-gen(|project-path, "syntax", ".sdf3_")> "contextualGrammar";
   result       := <pp-SDF3-string> ctx-ast     
       