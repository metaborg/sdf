module analysis/name-constraints

imports

  signatures/TemplateLang-sig
  libstratego-sglr
  libstratego-lib
  libstratego-gpp
  names/analysis/names
  libstrc
  runtime/nabl/-
  runtime/task/-
  runtime/types/-
  analysis/types
  generation/syntax/to-sdf
  analysis/desugar
  runtime/properties/-
  generation/gen-utils/remove-template

  signatures/aliases/-
  signatures/aterms/-
  signatures/basic/-
  signatures/characterclass/-
  signatures/constants/-
  signatures/grammar/-
  signatures/kernel/-
  signatures/labels/-
  signatures/layout/-
  signatures/layout-constraints/-
  signatures/lifting/-
  signatures/literals/-
  signatures/modules/-
  signatures/priority/-
  signatures/regular/-
  signatures/renaming/-
  signatures/restrictions/-
  signatures/sdf2-core/-
  signatures/sorts/-
  signatures/symbols/-
  signatures/TemplateLang-sig


strategies

  nabl-check-disable-duplicate(|uri, ns) = id
  nabl-check-disable-unresolved = id

rules

  nabl-constraint(|ctx):
      Module(Unparameterized(m), i*, s*) -> <fail>
  where
      m' := <strip-annos; string-tokenize(|['/']); last> m;
      <base-filename; remove-extension; not(?m')> ctx;
      msg := "Module name does not correspond to file name";
      <task-create-error(|ctx, msg)> m

  nabl-constraint(|ctx):
    t@Term(Default(Appl(Unquoted("cons"), [Fun(Quoted("\"Nil\""))]))) -> <fail>
  where
      msg := "In Stratego, Nil is the empty list, and Nil() does not match this constructor (use a different constructor name)";
      <task-create-error(|ctx, msg)> t

  nabl-constraint(|ctx):
    t@Term(Default(Appl(Unquoted("cons"), [Fun(Quoted("\"Cons\""))]))) -> <fail>
  where
      msg := "In Stratego, Cons is the list constructor, and Cons(_) does not match this constructor (use a different constructor name)";
      <task-create-error(|ctx, msg)> t

  nabl-constraint(|ctx):
    SortCons(s, c@Constructor("Nil")) -> <fail>
    where
      msg := "In Stratego, Nil is the empty list, and Nil() does not match this constructor (use a different constructor name)";
      <task-create-error(|ctx, msg)> c

    nabl-constraint(|ctx):
    SortCons(s, c@Constructor("Cons")) -> <fail>
    where
      msg := "In Stratego, Cons is the list constructor, and Cons(_) does not match this constructor (use a different constructor name)";
      <task-create-error(|ctx, msg)> c

    nabl-constraint(|ctx):
      sc@SortConsRef(Sort(s), Constructor(c)) -> <fail>
      where
        <has-annotation(?Use(task))> c;
        msg := $[Unresolved reference to constructor '[c]' of sort '[s]'];
        <task-create-error-on-triggers(|ctx, [Failure(task)], msg)> sc

    nabl-constraint(|ctx):
      sc@SortConsRef(Cf(Sort(s)), Constructor(c)) -> <fail>
      where
        <has-annotation(?Use(task))> c;
        msg := $[Unresolved reference to constructor '[c]' of sort '[s]'];
        <task-create-error-on-triggers(|ctx, [Failure(task)], msg)> sc

    nabl-constraint(|ctx):
      sc@SortConsRef(Lex(Sort(s)), Constructor(c)) -> <fail>
      where
        <has-annotation(?Use(task))> c;
        msg := $[Unresolved reference to constructor '[c]' of sort '[s]'];
        <task-create-error-on-triggers(|ctx, [Failure(task)], msg)> sc

    nabl-constraint(|ctx):
      sc@LabelRef(l) -> <fail>
      where
        <has-annotation(?Use(task))> l;
        msg := $[Invalid tree selector - undefined label '[l]'];
        <task-create-error-on-triggers(|ctx, [Failure(task)], msg)> sc

    nabl-constraint(|ctx):
      sc@LabelRef(l) -> <fail>
      where
        <has-annotation(?Use(task))> l;
        msg := $[Invalid tree selector - multiple definitions for label '[l]'];
        <task-create-error-on-triggers(|ctx, [Multiple(task)], msg)> sc

    nabl-constraint(|ctx):
      Module(Unparameterized(m)) -> <fail>
      where
      <has-annotation(?Use(task))> m;
      msg := $[Unresolved reference to module '[m]'];
      <task-create-error-on-triggers(|ctx, [Failure(task)], msg)> m

    nabl-constraint(|ctx):
       Sort(s) -> <fail>
      where
        <has-annotation(?Use(task))> s;
        msg := $[Unresolved reference to sort '[s]'];
        <task-create-error-on-triggers(|ctx, [Failure(task)], msg)> s

    nabl-constraint(|ctx):
      TemplateProductionWithCons(SortCons(s, Constructor(c)), template, attrs) -> <fail>
      where
        type       := <type-lookup(|ctx)> c;
        lookup     := <nabl-lookup-lexical(|ctx)> c;
        cons-types := <type-lookup(|ctx)> lookup;
        same-types := <task-create-rewrite(|ctx, "match-sort-type")> (type, cons-types);
        <task-create-warning-on-triggers(|ctx, [Multiple(same-types)], $[Duplicated definition for constructor [c]: the generated pretty-printer might not work properly])> c


    nabl-constraint(|ctx):
        SDFSection(ContextFreeSyntax(p*)) -> <fail>
        where
            alternatives* := <filter(check-for-alternatives); flatten-list> p*;
            sequences*    := <filter(check-for-sequences); flatten-list> p*;
            <map(task-create-error(|ctx, $[Alternatives can be used only in lexical syntax. Instead of C = A | B, use C = A C = B]))> alternatives*;
            <map(task-create-error(|ctx, $[Sequences can be used only in lexical syntax]))> sequences*

    nabl-constraint(|ctx):
        SDFSection(Kernel(p*)) -> <fail>
        where
            alternatives* := <filter(check-for-alternatives); flatten-list> p*;
            sequences*    := <filter(check-for-sequences); flatten-list> p*;
            <map(task-create-error(|ctx, $[Alternatives can be used only in lexical syntax. Instead of C = A | B, use C = A C = B]))> alternatives*;
            <map(task-create-error(|ctx, $[Sequences can be used only in lexical syntax]))> sequences*

    check-for-alternatives:
        p -> alt*
    where
        alt* := <collect(?Lex(_) <+ ?Cf(_) <+ ?Alt(_,_)); filter(?Alt(_,_))> p

    check-for-sequences:
        p -> seq*
    where
        seq* := <collect(?Lex(_) <+ ?Cf(_) <+ ?Sequence(_,_)); filter(?Sequence(_,_))> p



    nabl-constraint(|ctx):
      Module(Unparameterized(m), i*, s*) -> <fail>
    where
      chars       := <collect-one(?Tokenize(<id; explode-string; un-double-quote-chars>)) <+ !['(', ')']> s*;
      prods*      := <filter(?SDFSection(ContextFreeSyntax(<id>)) <+ ?SDFSection(Kernel(<id>))); flatten-list> s*;
      positions*  := <filter(check-for-pos-ref(|chars)); flatten-list> prods*;
      literals*   := <filter(check-for-literals(|chars)); flatten-list> prods*;
      align-list* := <filter(check-align-list(|chars)); flatten-list> prods*;
      <map(task-create-error(|ctx, $[Invalid tree selector - index ouf of bounds]))> positions*;
      <map(task-create-error(|ctx, $[Invalid tree selector - undefined or duplicated literal]))> literals*;
      <map(task-create-error(|ctx, $[Invalid tree selector - unary align should be applied to list non-terminal]))> align-list*

    check-for-pos-ref(|chars) :
        prod -> invalid*
        where
          posRef*  := <collect-all(?PosRef(<id>), collapse-lists)> prod;
          invalid* := <filter(is-invalid-pos(|prod, chars))> posRef*

    is-invalid-pos(|p, chars) :
        position -> <id>
        where
          intPos := <string-to-int> position;
          <gt> (intPos, <production-arity(|chars)> p)

    production-arity(|chars) :
      SdfProduction(_, Rhs(rhs*), _) -> <length> rhs*

    production-arity(|chars) :
      SdfProductionWithCons(_, Rhs(rhs*), _) -> <length> rhs*

    production-arity(|chars) :
      t@TemplateProduction(_, _, _) -> <desugar-templates; template-to-sdf3-prod(|chars); production-arity(|chars)> t

    production-arity(|chars) :
      t@TemplateProductionWithCons(_, _, _) -> <desugar-templates; template-to-sdf3-prod(|chars); production-arity(|chars)> t

    collapse-lists:
      (l1*, l2*) -> [l1*, l2*]

    check-for-literals(|chars) :
        prod -> invalid*
    where
       litRef* := <collect-all(?LiteralRef(<id>), collapse-lists)> prod;
       invalid* := <filter(is-invalid-lit(|prod, chars))> litRef*

    is-invalid-lit(|prod, chars):
      lit -> <id>
      where
        literal := Lit(lit);
        <not(get-production-rhs(|chars); is-defined-not-duplicated-literal(|literal))> prod

    get-production-rhs(|chars):
      SdfProduction(_, Rhs(rhs*), _) -> rhs*

    get-production-rhs(|chars):
      SdfProductionWithCons(_, Rhs(rhs*), _) -> rhs*

    get-production-rhs(|chars):
      t@TemplateProduction(_, _, _) -> <desugar-templates; template-to-sdf3-prod(|chars); get-production-rhs(|chars)> t

    get-production-rhs(|chars):
      t@TemplateProductionWithCons(_, _, _) -> <desugar-templates; template-to-sdf3-prod(|chars); get-production-rhs(|chars)> t

    get-production-attrs:
      SdfProduction(_, _, Attrs(attrs*)) -> attrs*

    get-production-attrs:
      SdfProductionWithCons(_, _, Attrs(attrs*)) -> attrs*

    get-production-attrs:
      TemplateProduction(_, _, Attrs(attrs*)) -> attrs*

    get-production-attrs:
      TemplateProductionWithCons(_, _, Attrs(attrs*)) -> attrs*

    is-defined-not-duplicated-literal(|lit):
      rhs* ->  <eq> (1, <length> rhs'*)
        where
          rhs'* := <filter(?lit)> rhs*

    check-align-list(|chars):
      prod -> invalid*
        where
          rhs*     := <get-production-rhs(|chars)> prod;
          pos*     := <get-production-attrs; collect-all(?Align(<id>) + ?PPAlign(<id>), collapse-lists); not(?[])> prod;
          invalid* := <filter(check-non-terminal-symbol(|rhs*))> pos*

    check-non-terminal-symbol(|rhs*):
      pos -> <id>
      where
        <get-non-terminal-symbol(|rhs*); not(?Iter(_) <+ ?IterStar(_) <+ ?IterSep(_, _) <+ ?IterStarSep(_, _)) > pos

    nabl-constraint(|lang, ctx, uri*):
      String(s) -> <fail>
    where
      [f | ls] := <explode-string> s;
      <is-upper> f
    where
      lookup := <nabl-use-candidate(|lang, ctx, uri*, s)> UseCandidate(NablNsSort(), [], Current(), (), ());
      <task-create-warning-on-triggers(|ctx,[Success(lookup)], $[Possible use of nonterminal placeholder as terminal (use &lt;&lt;[s]&gt;&gt; instead?)])> s

    nabl-constraint(|ctx):
        SDFSection(ContextFreeSyntax(p*)) -> <fail>
        where
            p'*            := <desugar-templates> p*;
            weird-symbols* := <filter(check-for-weird-symbols); flatten-list> p'*;
            prods-wo-cons* := <filter(prod-without-constructor)> p'*;
            illegal-brackets* := <filter(prod-with-illegal-brackets)> p'*;
            maybe-brackets*   := <filter(prod-maybe-brackets)> p'*;
            <map(task-create-warning(|ctx, $[Missing constructor name: the generated pretty printer might not work properly]))> prods-wo-cons*;
            <map(task-create-error(|ctx, $[Missing bracket attribute or constructor name]))> maybe-brackets*;
            <map(task-create-error(|ctx, $[Regular symbols (A*, A+ and A?) can be applied only to sorts in context-free syntax]))> weird-symbols*;
            <map(task-create-warning(|ctx, $[Illegal use of the {bracket} attribute]))> illegal-brackets*

    check-for-weird-symbols:
        p -> weird-symbols*
        where
            symbols* := <collect-all(?Iter(<id>) + ?IterStar(<id>) + ?Opt(<id>), conc)> p;
            weird-symbols* := <filter(not(?Sort(_)))> symbols*

    nabl-constraint(|ctx):
      SdfProductionWithCons(SortCons(s, Constructor(c)), rhs, attrs) -> <fail>
      where
        type       := <type-lookup(|ctx)> c;
        lookup     := <nabl-lookup-lexical(|ctx)> c;
        cons-types := <type-lookup(|ctx)> lookup;
        same-types := <task-create-rewrite(|ctx, "match-sort-type")> (type, cons-types);
        <task-create-warning-on-triggers(|ctx, [Multiple(same-types)], $[Duplicated definition for constructor [c]: the generated pretty-printer might not work properly])> c


  prod-without-constructor:
        p@SdfProduction(SortDef(s), Rhs(prod-sorts), Attrs(attrs*)) -> s
        where
            <not(?[Sort(sort)] + ?[])> prod-sorts;
            s'      := <strip-annos> s;
            <not(?[_, Sort(sort), _]; <strip-annos; ?s'> sort)> prod-sorts
            ; <not(fetch-elem(?Bracket() + ?Reject()))> attrs*

    prod-without-constructor:
        t@TemplateProduction(SortDef(s), template, Attrs(attrs*)) -> s
        where
            rhs* := <template-to-sdf(|["(", ")"], None(), "")> template;
            <not(?[sort(sort)] + ?[])> rhs* ;
            s'      := <strip-annos> s;
            <not(?[_, sort(sort), _]; <strip-annos; ?s'> sort)> rhs*;
            <not(fetch-elem(?Bracket() + ?Reject()))> attrs*

    prod-maybe-brackets:
        p@SdfProduction(SortDef(s), Rhs(prod-sorts), Attrs(attrs*)) -> s
        where
            s' := <strip-annos> s;
            <?[_, Sort(sort), _]; <strip-annos; ?s'> sort> prod-sorts;
            <not(fetch-elem(?Bracket() + ?Reject()))> attrs*

     prod-maybe-brackets:
        t@TemplateProduction(SortDef(s), template, Attrs(attrs*)) -> s
        where
            rhs* := <template-to-sdf(|["(", ")"], None(), "")> template;
            s'   := <strip-annos> s;
            <?[_, sort(sort), _]; <strip-annos; ?s'> sort> rhs*;
            <not(fetch-elem(?Bracket() + ?Reject()))> attrs*

    prod-with-illegal-brackets:
        p@SdfProduction(SortDef(s), Rhs(rhs*), Attrs(attrs*)) -> bracketanno
        where
          <not(fetch-elem(?Reject()))> attrs*;
          s' := <strip-annos> s;
            bracketanno := <fetch-elem(?Bracket())> attrs*; //it has the bracket anno
            <not(?[_, Sort(sort), _])> rhs* //it does not follow the bracket structure

    prod-with-illegal-brackets:
        t@TemplateProduction(SortDef(s), template, Attrs(attrs*)) -> bracketanno
        where
          <not(fetch-elem(?Reject()))> attrs*;
          s'      := <strip-annos> s;
            rhs     := <template-to-sdf(|["(", ")"], None(), "")> template;
            bracketanno := <fetch-elem(?Bracket())> attrs*;
            <not(?[_, sort(sort), _])> rhs

    prod-with-illegal-brackets:
        SdfProductionWithCons(sc, rhs, Attrs(attrs*)) -> bracketanno
        where
          <not(fetch-elem(?Reject()))> attrs*;
            bracketanno := <fetch-elem(?Bracket()); not(?[])> attrs*

    prod-with-illegal-brackets:
        TemplateProductionWithCons(sc, t, Attrs(attrs*)) -> bracketanno
        where
          <not(fetch-elem(?Reject()))> attrs*;
            bracketanno := <fetch-elem(?Bracket()); not(?[])> attrs*

  task-rewrite:
      ("match-sort-type", (e@FunType(ty*, SortType(s)), a@FunType(ty'*, SortType(s')))) -> a
      where
        <?s> s';
        <eq> (<length> ty*, <length> ty'*)
