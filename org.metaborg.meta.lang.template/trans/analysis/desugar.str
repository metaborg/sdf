module analysis/desugar
imports
  libstratego-lib
  signatures/TemplateLang-sig
  utils/attributes
  utils/misc
  libspoofax/term/origin
  libspoofax/term/annotation
  analysis/name-constraints

  signatures/aliases/-
  signatures/aterms/-
  signatures/basic/-
  signatures/characterclass/-
  signatures/constants/-
  signatures/grammar/-
  signatures/kernel/-
  signatures/labels/-
  signatures/layout/-
  signatures/layout-constraints/-
  signatures/lifting/-
  signatures/literals/-
  signatures/modules/-
  signatures/priority/-
  signatures/regular/-
  signatures/renaming/-
  signatures/restrictions/-
  signatures/sdf2-core/-
  signatures/sorts/-
  signatures/symbols/-
  signatures/TemplateLang-sig

signature constructors
  // desugar templates with one line into a single line template
  SingleLineTemplate	: List(TemplatePart1) -> Template
  SingleLineTemplate	: List(TemplatePart2) -> Template


strategies

  desugar-templates =
    alltd(origin-track-forced(preserve-annotations-attachments(desugar-template)))

rules

  desugar-template:
    SingleLineTemplate(elem*) -> SingleLineTemplate(elem'*)
    with
      elem'* := <desugar-elements; filter-breaks> elem*

  //desugar templates with one line into a single line template
  desugar-template:
    <?Template([Line(elem*)]) + ?TemplateSquare([Line(elem*)]) + ?TemplateDeprecated([Line(elem*)]) + ?TemplateSquareDeprecated([Line(elem*)])> -> SingleLineTemplate(elem'*)
    with
      elem'* := <desugar-elements; concatenate-consecutive-strings; filter-breaks> elem*

  desugar-template:
    TemplateSquare(lines*) -> result
    with
      result := <desugar-template> Template(lines*)

  desugar-template:
    TemplateDeprecated(lines*) -> result
    with
      result := <desugar-template> Template(lines*)

  desugar-template:
    TemplateSquareDeprecated(lines*) -> result
    with
      result := <desugar-template> Template(lines*)

  //desugar template contents
  desugar-template:
    Template(line*) -> Template(line'*)
    where
      not(!line* => [_])
   with
      let
          element-is-empty =
            ?Layout(_) + ?BreakAngled() + ?BreakSquared()

          line-is-empty =
            ?Line([]) + Line(all(element-is-empty))

          remove-head-if-empty =
            try(\[<line-is-empty> | t] -> t\)

          remove-last-if-empty =
            try(at-last(\[<line-is-empty>] -> []\))

          line-remove-trailing-layout =
            try(Line(at-last(\[<element-is-empty>] -> []\)))

          line-ensure-leading-layout =
            ?Line([Layout(_) | _]) <+ Line(![Layout("") | <id>])

          line-get-indent =
            // Only non-blank lines matter.
            ?Line([Layout(<string-length>), _ | _])

          get-indent =
            filter(line-get-indent);
            list-min

          string-unindent(|n) =
            ?"" <+ origin-track-forced(string-as-chars(drop(|n)))

          line-unindent(|n) =
            Line([origin-track-forced(Layout(string-unindent(|n))) | id])

          unindent =
            if get-indent => n then
              map(line-unindent(|n))
            end
      in
        !line*;
        remove-head-if-empty;
        remove-last-if-empty;
        desugar-elements;
        map(line-remove-trailing-layout; line-ensure-leading-layout);
        unindent;
        map(Line(concatenate-consecutive-strings; filter-breaks));
        ?line'*
      end

  desugar-elements =
    alltd(origin-track-forced(desugar-brackets)) ; alltd(origin-track-forced(desugar-element))

signature constructors
  // cons-list of options replaced by list of options
  : List(PlaceholderOption) -> PlaceholderOptions

rules
  desugar-element:
    NoOptions() -> []

  desugar-element:
    Options(x) -> <alltd(origin-track-forced(desugar-option))> x

  desugar-option:
    Text(x) -> Text(<origin-track-forced(un-double-quote; unescape)> x)

  desugar-element:
    Escape(t) -> String(t')
    with
      let parse-unicode =
            {before*, mid, after*:
               split-fetch-keep(not(is-hexnum)) => (before*, mid, after*);
               ![<hex-chars-to-int> before*, mid | after*]
            <+ ![<hex-chars-to-int>]
            }

          unescape =
            string-as-chars(rec x(
               \['\', ' ' | tail] -> [' '  | <x> tail]\
            <+ \['\', '\' | tail] -> ['\'  | <x> tail]\
            <+ \['\', '"' | tail] -> ['"'  | <x> tail]\
            <+ \['\', '\''| tail] -> ['\'' | <x> tail]\
            <+ \['\', 't' | tail] -> ['\t' | <x> tail]\
            <+ \['\', 'r' | tail] -> ['\r' | <x> tail]\
            <+ \['\', 'n' | tail] -> ['\n' | <x> tail]\
            <+ \['\', '<' | tail] -> ['<'  | <x> tail]\
            <+ \['\', '>' | tail] -> ['>'  | <x> tail]\
            <+ \['\', '[' | tail] -> ['['  | <x> tail]\
            <+ \['\', ']' | tail] -> [']'  | <x> tail]\
            <+ \['\', 'u' | tail] -> <parse-unicode; [id | x]> tail\
            <+ \['<', '\', '\', '>' | tail] -> <x> tail\
            <+ \['[', '\', '\', ']' | tail] -> <x> tail\
            <+ \[_ | tail] -> <x> tail\
            <+ []
            ))
      in
        t' := <origin-track-forced(unescape)> t
      end


  desugar-element:
    Layout(t) -> Layout(t')
    with
      t' := <origin-track-forced(string-replace(|"\t", "  "))> t

signature constructors
  // Squared and Angled removed
  : Placeholder -> TemplatePart1
  : Placeholder -> TemplatePart2

rules
  desugar-brackets:
    Squared(p) ->  p

  desugar-brackets:
    Angled(p) ->  p

  filter-breaks =
    filter(not(?BreakAngled() + ?BreakSquared()))


/********************
 * Layout Constraints
 ********************/
rules

  desugar-layout-constraints(|chars): sections -> <map(try(desugar-lc-section(|chars)))> sections

  desugar-lc-section(|chars): SDFSection(ContextFreeSyntax(prods)) ->
    SDFSection(ContextFreeSyntax(<desugar-lc-prods(|chars)> prods))

  desugar-lc-section(|chars): SDFSection(Kernel(prods)) ->
    SDFSection(Kernel(<desugar-lc-prods(|chars)> prods))

  desugar-lc-prods(|chars): prods -> <conc> (prods', align-prods)
    where
      align-prods := <filter(create-productions-align-list(|chars)); flatten-list; nub> prods;
      prods' := <map(desugar-lc-prod(|chars))> prods

rules // Align list desugaring

  create-productions-align-list(|chars):
    SdfProduction(_, Rhs(rhs), Attrs(attrs)) -> <create-align-productions(|rhs)> attrs

  create-productions-align-list(|chars):
    SdfProductionWithCons(_, Rhs(rhs), Attrs(attrs)) -> <create-align-productions(|rhs)> attrs

  create-productions-align-list(|chars):
    t@TemplateProduction(_, _, Attrs(attrs)) -> <create-align-productions(|rhs)> attrs
    where
      rhs := <get-production-rhs(|chars)> t

  create-productions-align-list(|chars):
    t@TemplateProductionWithCons(_, _, Attrs(attrs)) -> <create-align-productions(|rhs)> attrs
    where
      rhs := <get-production-rhs(|chars)> t

  create-align-productions(|rhs) =
    collect-all(?AlignList(<id>), conc);
    map(get-non-terminal-symbol(|rhs));
    filter(create-align-production)

  create-align-production:
    Iter(s) -> SdfProduction(Iter(s), Rhs([Iter(s), s]), Attrs([LayoutConstraint(Eq(Col(First(PosRef("0"))), Col(First(PosRef("1")))))]))

  create-align-production:
    IterStar(s) -> SdfProduction(Iter(s), Rhs([Iter(s), s]), Attrs([LayoutConstraint(Eq(Col(First(PosRef("0"))), Col(First(PosRef("1")))))]))

  create-align-production:
    IterSep(s, sep) -> SdfProduction(IterSep(s, sep), Rhs([IterSep(s, sep), sep, s]), Attrs([LayoutConstraint(Eq(Col(First(PosRef("0"))), Col(First(PosRef("2")))))]))

  create-align-production:
    IterStarSep(s, sep) -> SdfProduction(IterSep(s, sep), Rhs([IterSep(s, sep), sep, s]), Attrs([LayoutConstraint(Eq(Col(First(PosRef("0"))), Col(First(PosRef("2")))))]))

rules // Layout declarations desugaring

  desugar-lc-prod(|chars):
    SdfProduction(lhs, Rhs(rhs), Attrs(attrs)) -> SdfProduction(lhs, Rhs(rhs), Attrs(attrs'))
    where
      attrs' := <desugar-lc-attrs(|rhs)> attrs

  desugar-lc-prod(|chars):
    SdfProductionWithCons(lhs, Rhs(rhs), Attrs(attrs)) -> SdfProductionWithCons(lhs, Rhs(rhs), Attrs(attrs'))
    where
      attrs' := <desugar-lc-attrs(|rhs)> attrs

  desugar-lc-prod(|chars):
    t@TemplateProduction(lhs, _, Attrs(attrs)) -> TemplateProduction(lhs, rhs, Attrs(attrs'))
    where
      rhs := <get-production-rhs(|chars)> t;
      attrs' := <desugar-lc-attrs(|rhs)> attrs

  desugar-lc-prod(|chars):
    t@TemplateProductionWithCons(lhs, _, Attrs(attrs)) -> TemplateProductionWithCons(lhs, rhs, Attrs(attrs'))
    where
      rhs := <get-production-rhs(|chars)> t;
      attrs' := <desugar-lc-attrs(|rhs)> attrs


  desugar-lc-attrs(|rhs) =
    remove-align-list-and-pp-constraints;
    flatten-list;
    map(try(desugar-lc-attr(|rhs)))

  desugar-lc-attr(|rhs): LayoutConstraint(constraint) -> LayoutConstraint(constraint')
    where
      constraint' := <bottomup(try(get-tree-position(|rhs) <+ rewrite-constraint))> constraint


  /**
   * Rewrites a layout declaration to layout constraints.
   * It is assumed that all `ConstraintTreeRef` have been desugared to `PosRef`.
   */
  rewrite-constraint: Indent(ref-pos, pos*) -> constraint
    where
      constraint := <map(create-indent-constraint(|ref-pos)); combine-constraints> pos*

  create-indent-constraint(|ref-pos): PosRef(p) -> Gt(Col(First(PosRef(p))), Col(First(ref-pos)))

  rewrite-constraint: NewLineIndent(ref-pos, pos*) -> constraint
    where
      constraint := <map(create-newline-indent-constraint(|ref-pos)); combine-constraints> pos*

  create-newline-indent-constraint(|ref-pos): PosRef(p) ->
    And(Gt(Col(First(PosRef(p))), Col(First(ref-pos))), Gt(Line(First(PosRef(p))), Line(Last(ref-pos))))

  rewrite-constraint: Offside(ref-pos, []) -> Gt(Col(Left(ref-pos)), Col(First(ref-pos)))

  rewrite-constraint: Offside(ref-pos, pos*) -> constraint
    where
      <not(?[])> pos*;
      constraint := <map(create-offside-constraint(|ref-pos)); combine-constraints> pos*

  create-offside-constraint(|ref-pos): PosRef(p) -> Gt(Col(Left(PosRef(p))), Col(First(ref-pos)))

  rewrite-constraint: Align(ref-pos, pos*) -> constraint
    where
      constraint := <map(create-align-constraint(|ref-pos)); combine-constraints> pos*

  create-align-constraint(|ref-pos): PosRef(p) -> Eq(Col(First(PosRef(p))), Col(First(ref-pos)))

rules // Util

  /**
   * Combines a list of constraints in a left associative manner.
   */
  combine-constraints = reverse; combine-constraints-
  combine-constraints-: [x] -> x
  combine-constraints-: [x | xs] -> And(<combine-constraints> xs, x)
    where <not(?[])> xs


  /**
   * Transforms a ConstraintTreeRef` to a `PosRef`
   * with zero based index of a symbol in rhs.
   */
  get-tree-position(|rhs): PosRef(p) -> PosRef(p)

  get-tree-position(|rhs): LabelRef(l) -> PosRef(<dec; int-to-string> p)
    where
      l' := <strip-annos> l;
      p := <add-indices; fetch-elem({ i, s: ?(i, s); <where(strip-annos; get-labeled-symbol(|l'))> s; !i})> rhs

  get-tree-position(|rhs): LiteralRef(l) -> PosRef(<dec; int-to-string> p)
    where
      unquoted := <strip-annos; un-double-quote> l;
      p := <add-indices; fetch-elem({ i, s: ?(i, s); <where(symbol-is-literal(|unquoted))> s; !i})> rhs


  /**
   * Returns an unlabeled `Symbol` from a `ConstraintTreeRef`.
   * Fails if the symbol could not be found in rhs.
   */
  get-non-terminal-symbol(|rhs): PosRef(p) -> <index; unwrap-label> (<string-to-int; inc> p, rhs)

  get-non-terminal-symbol(|rhs): LabelRef(l) -> symbol
    where
      l' := <strip-annos> l;
      symbol := <fetch-elem(strip-annos; get-labeled-symbol(|l'))> rhs

  get-non-terminal-symbol(|rhs): LiteralRef(l) -> symbol
    where
      unquoted := <strip-annos; un-double-quote> l;
      symbol := <fetch-elem(unwrap-label; where (symbol-is-literal(|unquoted)))> rhs


  /**
   * Succeeds if a given `Symbol` term is a literal equal to l.
   * l should be unquoted.
   */
  symbol-is-literal(|l) = strip-annos; unwrap-label; (?Lit(<un-double-quote>) + ?CiLit(<un-single-quote>)); ?l

  unwrap-label = try(?Label(_, <id>))

  get-labeled-symbol(|l): Label(Unquoted(l), symbol) -> symbol
  get-labeled-symbol(|l): Label(Quoted(str), symbol) -> symbol
    where <un-double-quote> str => l


  /**
   * Removes all align-list and pp declarations from layout constraints.
   * Returns the empty list when no layout is left.
   */
  remove-align-list-and-pp-constraints = innermost(remove-align-list-and-pp-constraint)
  remove-align-list-and-pp-constraint: LayoutConstraint(<remove-constraint>) -> []
  remove-align-list-and-pp-constraint: And(<remove-constraint>, c) -> c
  remove-align-list-and-pp-constraint: And(c, <remove-constraint>) -> c
  remove-align-list-and-pp-constraint: Or(<remove-constraint>, c) -> c
  remove-align-list-and-pp-constraint: Or(c, <remove-constraint>) -> c
  remove-align-list-and-pp-constraint: Not(<remove-constraint>) -> []

  remove-constraint =
      ?[]
    + ?AlignList(_)
    + ?PPAlignList(_)
    + ?PPOffside(_, _)
    + ?PPIndent(_, _)
    + ?PPAlign(_, _)
    + ?PPNewLineIndent(_, _)
    + ?PPNewLineIndentBy(_, _, _)
    + ?PPNewLine(_)
    + ?PPNewLineBy(_, _)
