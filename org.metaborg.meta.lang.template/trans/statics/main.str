module statics/main

imports

  statixruntime
  statix/api

imports

  analysis/lifting

rules // Analysis

  statix-editor-analyze = stx-editor-analyze(statix-pre, statix-post|"statics/statics", "projectOK", "moduleOK")

rules // Editor Services

  statix-editor-resolve = stx-editor-resolve

  statix-editor-hover = stx-editor-hover

rules // Debugging

  // Prints the analyzed annotated abstract syntax ATerm of a selection.
  statix-debug-show-analyzed: (selected, _, _, path, project-path) -> (filename, result)
    with filename := <guarantee-extension(|"analyzed.aterm")> path
       ; result   := selected

  statix-debug-show-pre-transformed:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"statix-pre-transformed.aterm")> path;
      result   := <statix-pre> selected

  statix-debug-show-pre-post-transformed:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"statix-pre-post-transformed.aterm")> path;
      result   := <statix-pre; statix-post> selected

rules // Statix pre and post-transformation

  statix-pre  = lift-all; explicate-all-injections; disambiguate-all-constructors
  statix-post = ambiguate-all-constructors; unexplicate-all-injections

  explicate-all-injections   = topdown(try(  explicate-injection))
  unexplicate-all-injections = topdown(try(unexplicate-injection))

  disambiguate-all-constructors = topdown(try(disambiguate-constructor))
  ambiguate-all-constructors    = topdown(try(   ambiguate-constructor))
  
  explicate-injection      = fail
  unexplicate-injection    = fail
  disambiguate-constructor = fail
  ambiguate-constructor    = fail

signature constructors // GeneralProduction injections

  GeneralProduction_SdfProduction      : SdfProduction      -> GeneralProduction
  GeneralProduction_TemplateProduction : TemplateProduction -> GeneralProduction

rules

  explicate-injection   = ContextFreeSyntax(map(  explicate-general-production))
  unexplicate-injection = ContextFreeSyntax(map(unexplicate-general-production))

  explicate-general-production: prod@SdfProduction(_, _, _)              -> GeneralProduction_SdfProduction(prod)
  explicate-general-production: prod@SdfProductionWithCons(_, _, _)      -> GeneralProduction_SdfProduction(prod)
  explicate-general-production: prod@TemplateProduction(_, _, _)         -> GeneralProduction_TemplateProduction(prod)
  explicate-general-production: prod@TemplateProductionWithCons(_, _, _) -> GeneralProduction_TemplateProduction(prod)
  unexplicate-general-production: GeneralProduction_SdfProduction(prod)      -> prod
  unexplicate-general-production: GeneralProduction_TemplateProduction(prod) -> prod

signature constructors // PriorityProduction injections

  PriorityProduction_SdfProduction : SdfProduction -> PriorityProduction
  PriorityProduction_Production    : Production    -> PriorityProduction

rules

  explicate-injection = SimpleGroup(        explicate-priority-production )
  explicate-injection = ProdsGroup (    map(explicate-priority-production))
  explicate-injection = AssocGroup (id, map(explicate-priority-production))
  unexplicate-injection = SimpleGroup(        unexplicate-priority-production )
  unexplicate-injection = ProdsGroup (    map(unexplicate-priority-production))
  unexplicate-injection = AssocGroup (id, map(unexplicate-priority-production))

  explicate-priority-production: prod@SdfProduction(_, _, _)         -> PriorityProduction_SdfProduction(prod)
  explicate-priority-production: prod@SdfProductionWithCons(_, _, _) -> PriorityProduction_SdfProduction(prod)
  explicate-priority-production: prod@Prod(_, _, _)                  -> PriorityProduction_Production(prod)
  unexplicate-priority-production: PriorityProduction_SdfProduction(prod) -> prod
  unexplicate-priority-production: PriorityProduction_Production(prod)    -> prod

signature constructors // SymbolDef injections

  SymbolDef_Symbol : Symbol -> SymbolDef

rules

  explicate-injection = SdfProduction             (explicate-symboldef, id, id)
  explicate-injection = SdfProductionWithCons     (explicate-injection, id, id)
  explicate-injection = TemplateProduction        (explicate-symboldef, id, id)
  explicate-injection = TemplateProductionWithCons(explicate-injection, id, id)
  explicate-injection = KeywordAttributes         (explicate-symboldef, id)
  unexplicate-injection = SdfProduction             (unexplicate-symboldef, id, id)
  unexplicate-injection = SdfProductionWithCons     (unexplicate-injection, id, id)
  unexplicate-injection = TemplateProduction        (unexplicate-symboldef, id, id)
  unexplicate-injection = TemplateProductionWithCons(unexplicate-injection, id, id)
  unexplicate-injection = KeywordAttributes         (unexplicate-symboldef, id)

  explicate-symboldef: symbol -> SymbolDef_Symbol(symbol) 
  where <not(?SortDef(_) <+ ?Cf(_) <+ ?Lex(_) <+ ?Var(_))> symbol
  unexplicate-symboldef: SymbolDef_Symbol(symbol) -> symbol

signature constructors // SymbolDef and ambiguous constructors

  SymbolDefCf  : SymbolDef -> SymbolDef
  SymbolDefLex : SymbolDef -> SymbolDef
  SymbolDefVar : SymbolDef -> SymbolDef

rules 

  disambiguate-constructor = SdfProduction             (disambiguate-symboldef-constructor, id, id)
  disambiguate-constructor = SdfProductionWithCons     (disambiguate-constructor, id, id)
  disambiguate-constructor = TemplateProduction        (disambiguate-symboldef-constructor, id, id)
  disambiguate-constructor = TemplateProductionWithCons(disambiguate-constructor, id, id)
  disambiguate-constructor = KeywordAttributes         (disambiguate-symboldef-constructor, id)
  ambiguate-constructor = SdfProduction             (ambiguate-symboldef-constructor, id, id)
  ambiguate-constructor = SdfProductionWithCons     (ambiguate-constructor, id, id)
  ambiguate-constructor = TemplateProduction        (ambiguate-symboldef-constructor, id, id)
  ambiguate-constructor = TemplateProductionWithCons(ambiguate-constructor, id, id)
  ambiguate-constructor = KeywordAttributes         (ambiguate-symboldef-constructor, id)
  
  disambiguate-constructor = SortCons(disambiguate-symboldef-constructor, id)
  ambiguate-constructor = SortCons(ambiguate-symboldef-constructor, id)
  
  disambiguate-symboldef-constructor:  Cf(symbolDef) -> SymbolDefCf (symbolDef)
  disambiguate-symboldef-constructor: Lex(symbolDef) -> SymbolDefLex(symbolDef)
  disambiguate-symboldef-constructor: Var(symbolDef) -> SymbolDefVar(symbolDef)
  ambiguate-symboldef-constructor: SymbolDefCf (symbolDef) -> Cf (symbolDef)
  ambiguate-symboldef-constructor: SymbolDefLex(symbolDef) -> Lex(symbolDef)
  ambiguate-symboldef-constructor: SymbolDefVar(symbolDef) -> Var(symbolDef)

signature constructors // SymbolDef ambiguous constructors

  DeclSymbolCf  : DeclSymbol -> DeclSymbol
  DeclSymbolLex : DeclSymbol -> DeclSymbol
  DeclSymbolVar : DeclSymbol -> DeclSymbol

rules 

  disambiguate-constructor = Sorts(map(disambiguate-declsymbol-constructor))
  ambiguate-constructor = Sorts(map(ambiguate-declsymbol-constructor))
  
  disambiguate-declsymbol-constructor:  Cf(symbolDef) -> DeclSymbolCf (symbolDef)
  disambiguate-declsymbol-constructor: Lex(symbolDef) -> DeclSymbolLex(symbolDef)
  disambiguate-declsymbol-constructor: Var(symbolDef) -> DeclSymbolVar(symbolDef)
  ambiguate-declsymbol-constructor: DeclSymbolCf (symbolDef) -> Cf (symbolDef)
  ambiguate-declsymbol-constructor: DeclSymbolLex(symbolDef) -> Lex(symbolDef)
  ambiguate-declsymbol-constructor: DeclSymbolVar(symbolDef) -> Var(symbolDef)
