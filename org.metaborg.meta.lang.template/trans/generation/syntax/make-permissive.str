module generation/syntax/make-permissive

imports 
  libstratego-sglr
  libspoofax/core/parse
  signatures/TemplateLang-sig
  analysis/desugar
  analysis/attributes
  analysis/lifting
  generation/gen-utils/remove-template

imports
  signatures/aliases/-
  signatures/aterms/-
  signatures/basic/-
  signatures/characterclass/-
  signatures/constants/-
  signatures/grammar/-
  signatures/kernel/-
  signatures/labels/-
  signatures/layout/-
  signatures/layout-constraints/-
  signatures/lifting/-
  signatures/literals/-
  signatures/modules/-
  signatures/priority/-
  signatures/regular/-
  signatures/renaming/-
  signatures/restrictions/-
  signatures/sdf2-core/-
  signatures/sorts/-
  signatures/symbols/-
  signatures/TemplateLang-sig

rules

  module-to-permissive-productions:
    Module(Unparameterized(mn), i*, sections*) -> Module(Unparameterized($[[mn]-permissive]), [import-main], [SDFSection(LexicalSyntax([closing-brckts-lit*, opening-brckts-lit*]))])
    where
        mn'  := <strip-annos> mn;
        rules(expanded-module-permissive: mn' -> <id>)
    where
        import-main         := Imports([Module(Unparameterized(mn))]);
        import-names*       := <collect(?Module(Unparameterized(<id>)))> i*; 
        chars               := <collect-one(?Tokenize(<id; explode-string; un-double-quote-chars>)) <+ !['(', ')']> sections*;
        sections'*          := <desugar-templates; remove-templates(|chars)> sections*;
//        imported-sections*  := <filter(expand-import-permissive(|path)); flatten-list> import-names*;
        water-prods*        := <get-boilerplate-water>;
        cf-prods*           := <filter(?SDFSection(ContextFreeSyntax(<id>))); concat> [sections'*];
        closing-brckts-lit* := <filter(fetch-closing-brackets-lit); map(make-recover-insertion-prod); nub> cf-prods* ;
        opening-brckts-lit* := <filter(fetch-opening-brackets-lit); map(make-recover-insertion-prod); nub> cf-prods* 
                
  module-to-permissive:
    Module(Unparameterized(mn), i*, sections*) -> Module(Unparameterized(mn), i*, [sections*, SDFSection(LexicalSyntax([closing-brckts-lit*, opening-brckts-lit*]))])
    where
        mn'  := <strip-annos> mn
    where
        import-main         := Imports([Module(Unparameterized(mn))]);
//        import-names*       := <collect(?Module(Unparameterized(<id>)))> i*; 
        chars               := <collect-one(?Tokenize(<id; explode-string; un-double-quote-chars>)) <+ !['(', ')']> sections*;
        sections'*          := <desugar-templates; remove-templates(|chars)> sections*;
        water-prods*        := <get-boilerplate-water>;
        cf-prods*           := <filter(?SDFSection(ContextFreeSyntax(<id>))); concat> [sections'*];
        closing-brckts-lit* := <filter(fetch-closing-brackets-lit); map(make-recover-insertion-prod); nub> cf-prods* ;
        opening-brckts-lit* := <filter(fetch-opening-brackets-lit); map(make-recover-insertion-prod); nub> cf-prods* 
   
  expand-import-permissive(|path):
    name -> file
    where
        name'  := <strip-annos> name;  
        <not(expanded-module-permissive)> name';
        rules(
            expanded-module-permissive:
                name' -> <id>
        );
        debug(!"name ");
        file := <resolve-path-permissive(|path); parse-file; get-sections-permissive(|path)> name;
        debug(!"sections ")        
  
  resolve-path-permissive(|path):
    name -> resolved-name
    where
        resolved-name := $[[path]/[name].sdf3]
            
  get-sections-permissive(|path):
    Module(Unparameterized(mn), i*, sections*) -> [sections'*, imported-sections'*]
    where
        import-names*      := <collect(?Module(Unparameterized(<id>)))> i*; 
        chars := <collect-one(?Tokenize(<id; explode-string; un-double-quote-chars>)) <+ !['(', ')']> sections*;
        sections'* := <desugar-templates; remove-templates(|chars)> sections*;
        imported-sections* := <filter(expand-import-permissive(|path))> import-names*;
        imported-sections'* := <desugar-templates; remove-templates(|chars)> imported-sections*
 
  //symbol shouldn't be first of any symbol in the lhs in the grammar
  fetch-closing-brackets-lit:
    SdfProductionWithCons(_, Rhs(rhs*@[h | hs]), _) -> symbol
    where
        <?Lit(_)> h;
        symbol := <last; ?Lit(_)> hs;
        <not(?"\"\"")> symbol      
        
  fetch-closing-brackets-lit:
    SdfProduction(_, Rhs(rhs*@[h | hs]), _) -> symbol
    where
        <?Lit(_)> h;
        symbol := <last; ?Lit(_)> hs;
        <not(?"\"\"")> symbol      
        
  make-recover-insertion-prod:
    l@Lit(lit) -> SdfProductionWithCons(SortCons(l, Constructor("INSERTION")), Rhs([]), Attrs([Term(Default(Fun(Unquoted("recover"))))]))
    
  
  //symbol should not be first of any other symbol in hs in the grammar?     
  fetch-opening-brackets-lit:
    SdfProductionWithCons(_, Rhs(rhs*@[l@Lit(lit) | hs]), _) -> l
    where
      <not(?"\"\"")> lit      
    
        
        

    
 
 /*
   lexical syntax
    [A-Za-z0-9\_]                  -> WATERTOKENSTART     {recover, avoid}
    WATERTOKENSTART [A-Za-z0-9\_]* -> WATERTOKEN          
    ~[A-Za-z0-9\_\ \t\12\r\n\*]    -> WATERTOKENSEPARATOR {recover, avoid}
    "*"                            -> WATERTOKENSTAR      {recover, avoid}
    WATERTOKEN                     -> WATER               
    WATERTOKENSEPARATOR            -> WATER               
    WATERTOKENSTAR                 -> WATER               
                                   -> WATEREOF      
    
    lexical restrictions
    WATERTOKEN -/- [A-Za-z0-9\_]
    WATERTOKENSTAR -/- [\/]

  context-free syntax
    WATER -> LAYOUT {cons("WATER")}

  lexical restrictions
    WATEREOF -/- ~[]
 
 */
 
  get-boilerplate-water = ![ SDFSection(LexicalSyntax([ SdfProduction(SortDef("WATERTOKENSTART"), Rhs([CharClass(Simple(Present(Conc(Range(Regular("A"), Regular("Z")), Conc(Range(Regular("a"), Regular("z")), Conc(Range(Regular("0"), Regular("9")), Regular("\\_")))))))]), Attrs([Term(Default(Fun(Unquoted("recover")))), Avoid()]))
        , SdfProduction(SortDef("WATERTOKEN"), Rhs([Sort("WATERTOKENSTART"), IterStar(CharClass(Simple(Present(Conc(Range(Regular("A"), Regular("Z")), Conc(Range(Regular("a"), Regular("z")), Conc(Range(Regular("0"), Regular("9")), Escaped("_"))))))))]), NoAttrs())
        , SdfProduction(SortDef("WATERTOKENSEPARATOR"), Rhs([CharClass(Comp(Simple(Present(Conc(Range(Regular("A"), Regular("Z")), Conc(Range(Regular("a"), Regular("z")), Conc(Range(Regular("0"), Regular("9")), Conc(Escaped("_"), Conc(Escaped(" "), Conc(Range(Escaped("t"), Escaped("r")), Escaped("*")))))))))))]), Attrs([Term(Default(Fun(Unquoted("recover")))), Avoid()]))
        , SdfProduction(SortDef("WATERTOKENSTAR"), Rhs([Lit("\"*\"")]), Attrs([Term(Default(Fun(Unquoted("recover")))), Avoid()]))
        , SdfProduction(SortDef("WATER"), Rhs([Sort("WATERTOKEN")]), NoAttrs())
        , SdfProduction(SortDef("WATER"), Rhs([Sort("WATERTOKENSEPARATOR")]), NoAttrs())
        , SdfProduction(SortDef("WATER"), Rhs([Sort("WATERTOKENSTAR")]), NoAttrs())
        , SdfProduction(SortDef("WATEREOF"), Rhs([]), NoAttrs())
        ]
      )
    )
  , SDFSection(LexicalRestrictions(
        [ Follow([Sort("WATERTOKEN")], Single(CharClass(Simple(Present(Conc(Range(Regular("A"), Regular("Z")), Conc(Range(Regular("a"), Regular("z")), Conc(Range(Regular("0"), Regular("9")), Escaped("_")))))))))
        , Follow([Sort("WATERTOKENSTAR")], Single(CharClass(Simple(Present(Escaped("/"))))))
        ]
      )
    )
  , SDFSection(ContextFreeSyntax([SdfProductionWithCons(SortCons(Layout(), Constructor("WATER")), Rhs([Sort("WATER")]), NoAttrs())]))
  , SDFSection(LexicalRestrictions([Follow([Sort("WATEREOF")], Single(CharClass(Comp(Simple(Absent())))))]))
  ]
              
