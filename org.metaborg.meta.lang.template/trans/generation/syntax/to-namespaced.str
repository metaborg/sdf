module generation/syntax/to-namespaced

imports 
  libstratego-sglr
  libspoofax/core/parse
  signatures/TemplateLang-sig
  analysis/desugar
  analysis/attributes
  analysis/lifting

imports
  signatures/aliases/-
  signatures/aterms/-
  signatures/basic/-
  signatures/characterclass/-
  signatures/constants/-
  signatures/grammar/-
  signatures/kernel/-
  signatures/labels/-
  signatures/layout/-
  signatures/layout-constraints/-
  signatures/lifting/-
  signatures/literals/-
  signatures/modules/-
  signatures/priority/-
  signatures/regular/-
  signatures/renaming/-
  signatures/restrictions/-
  signatures/sdf2-core/-
  signatures/sorts/-
  signatures/symbols/-
  signatures/TemplateLang-sig

rules
  language-spec-name = prim("pp_language_spec_name") <+ !"unknown"      
  
rules
  
  module-to-namespaced:
    Module(Unparameterized(mn), i*, sections*) -> Module(Unparameterized(mn'), i'*, sections'*)
    where
      mn'        :=  <namespace-module-name> mn;
      sections'* := <topdown(try(namespace-sort))> sections*;
      i'*        := <topdown(try(Module(Unparameterized(namespace-module-name))))> i*
      
  namespace-module-name:
    mn -> mn'
    where
      // TODO: test if module exists in this project, otherwise don't rename
      lang       := <language-spec-name>;
      mn'        :=  <concat-strings> [lang, "/", mn, "-namespaced"]
      
  namespace-sort:
    DeclSort(x) -> DeclSort(x')
    where
      capital-lang-name := <string-as-chars(to-upper-first-char)> <language-spec-name>;
      x'                := <concat-strings> [capital-lang-name, "-", x]
    
  namespace-sort:
    Sort(x) -> Sort(x')
    where
      // TODO: test if only defined in this project, otherwise don't rename
      capital-lang-name := <string-as-chars(to-upper-first-char)> <language-spec-name>;
      x'                := <concat-strings> [capital-lang-name, "-", x]
      
  namespace-sort:
    SortDef(x) -> SortDef(x')
    where
      capital-lang-name := <string-as-chars(to-upper-first-char)> <language-spec-name>;
      x'                := <concat-strings> [capital-lang-name, "-", x]
    
   to-upper-first-char:
     [first, rest*] -> [first', rest*]
     where
       first' := <to-upper> first 