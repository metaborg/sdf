module generation/signatures/to-sig

imports
  libstratego-lib
  libstrc
  analysis/types
  runtime/nabl/-
  runtime/task/-
  runtime/types/-
  generation/gen-utils/to-str
  analysis/desugar

imports
  signatures/aliases/-
  signatures/aterms/-
  signatures/basic/-
  signatures/characterclass/-
  signatures/constants/-
  signatures/grammar/-
  signatures/kernel/-
  signatures/labels/-
  signatures/layout/-
  signatures/layout-constraints/-
  signatures/lifting/-
  signatures/literals/-
  signatures/modules/-
  signatures/priority/-
  signatures/regular/-
  signatures/renaming/-
  signatures/restrictions/-
  signatures/sdf2-core/-
  signatures/sorts/-
  signatures/symbols/-
  signatures/TemplateLang-sig

rules

  module-to-sig = module-to-sig(|"1")

  module-to-sig(|stratego-version):
    Module(Unparameterized(m), i*, s*) -> Module(m',  [is*, s'])
  with
    m'    := <conc-strings> ("signatures/", m, "-sig");
    is*   := <map(to-str-import(|"-sig", "signatures"));![Imports([Import(<libstratego-name> stratego-version)])|<id>]> i*;
    sort* := <filter(sorts-section-to-sig)> s*;
    cons* := <filter(section-to-sig); flatten-list> s*;
    s'    := Signature([sort*, Sorts([SortNoArgs("COMPLETION-INSERTION")]), Constructors(cons*)])

  sorts-section-to-sig:
    SDFSection(Sorts(s*)) -> Sorts(s'*)
    with
      s'* := <map(sort-to-sig)> s*

  section-to-sig:
    SDFSection(LexicalSyntax(p*)) -> sig*
    where
        sig* := <filter(get-sort-from-prod)
               ; nub
               ; map(lexsort-to-injection)
               ; not(?[])> p*

  get-sort-from-prod:
    <?SdfProduction(SortDef(sort), _, Attrs(a*)) + ?SdfProductionWithCons(SortCons(SortDef(sort), Constructor(_)), _, Attrs(a*))> -> sort
    where
      <not(fetch-elem(?Reject()))> a*

  lexsort-to-injection:
    s -> OpDeclInj(FunType([SortVar("string")], SortType(s)))

  section-to-sig:
    SDFSection(ContextFreeSyntax(p*)) -> <not(?[])> [sig*, cc-sig*, cc-ins-sig*, cc-opt-sig*]
    where
      cc-sig*      := < collect(?SortDef(<strip-annos>) + ?Sort(<strip-annos>))
                      ; nub
                      ; map(sort-to-placeholder-sig)> p*;
      cc-ins-sig* :=  < collect(?SortDef(<strip-annos>) + ?Sort(<strip-annos>))
                      ; nub
                      ; map(sort-to-placeholder-insertion-sig)> p*;
      cc-opt-sig* := < collect(?Opt(Sort(<strip-annos>)) + ?IterStarSep(Sort(<strip-annos>), _) + ?IterStar(Sort(<strip-annos>))
                             + ?SdfProductionWithCons(SortCons(SortDef(<strip-annos>), _), Rhs([]), _)
                             <+ ?TemplateProductionWithCons(SortCons(SortDef(<strip-annos>), _), SingleLineTemplate([]), _))
                     ; nub
                     ; map(sort-to-opt-placeholder-sig)> p*
    where
      sig*    := <filter(cfg-to-sig <+ template-to-sig)> p*

  section-to-sig:
    SDFSection(Kernel(p*)) -> <not(?[])> [sig*, cc-sig*, cc-ins-sig*, cc-opt-sig*]
    where
      cc-sig*     := < collect(?SortDef(<strip-annos>) + ?Sort(<strip-annos>))
                     ; nub
                     ; map(sort-to-placeholder-sig)> p*;
      cc-ins-sig* := < collect(?SortDef(<strip-annos>) + ?Sort(<strip-annos>))
                     ; nub
                     ; map(sort-to-placeholder-insertion-sig)> p*;
      cc-opt-sig* := < collect(?Opt(Sort(<strip-annos>)) + ?IterStarSep(Sort(<strip-annos>), _) + ?IterStar(Sort(<strip-annos>)) + ?SdfProductionWithCons(SortCons(SortDef(<strip-annos>), _), Rhs([]), _))
                     ; nub
                     ; map(sort-to-opt-placeholder-sig)> p*
    where
      sig* := <filter(cfg-to-sig)> p*

  sort-to-sig:
    DeclSort(s)    -> SortNoArgs(s)
    // TODO:
  sort-to-sig:
    DeclSortLex(s) -> SortNoArgs(s)
  sort-to-sig:
    DeclSortCf(s)  -> SortNoArgs(s)
  sort-to-sig:
    DeclSortVar(s) -> SortNoArgs(s)

  cfg-to-sig:
    SdfProductionWithCons(SortCons(SortDef(s),c), _, Attrs(a*)) -> <cons-to-decl> c
    where
      <not(fetch-elem(?Reject() + ?Bracket()))> a*

  cfg-to-sig:
    SdfProduction(SortDef(s), rhs, Attrs(a*)) -> OpDeclInj(t')
    where
      <not(fetch-elem(?Reject() + ?Bracket()))> a*
    with  
      rhs-type := <get-sdf3-type> rhs;
      t'       := <try(check-fun-type)> FunType(rhs-type, SortType(s))

  // kernel productions
   cfg-to-sig:
     SdfProduction(Lex(SortDef(s)), rhs, Attrs(a*)) -> OpDeclInj(t')
     where
      <not(fetch-elem(?Reject() + ?Bracket()))> a*
     with 
      rhs-type := <get-sdf3-type> rhs;
      t'       := <try(check-fun-type)> FunType(rhs-type, SortType(s))

  cfg-to-sig:
     SdfProduction(Cf(SortDef(s)), rhs, Attrs(a*)) -> OpDeclInj(t')
     where
      <not(fetch-elem(?Reject() + ?Bracket()))> a*
     with 
      rhs-type := <get-sdf3-type> rhs;
      t'       := <try(check-fun-type)> FunType(rhs-type, SortType(<strip-annos> s))

  cfg-to-sig:
    SdfProductionWithCons(SortCons(Cf(SortDef(s)),c), _, Attrs(a*)) -> <cons-to-decl> c
    where
      <not(fetch-elem(?Reject() + ?Bracket()))> a*

  cfg-to-sig:
    SdfProductionWithCons(SortCons(Lex(SortDef(s)),c), _, Attrs(a*)) -> <cons-to-decl> c
    where
      <not(fetch-elem(?Reject() + ?Bracket()))> a*

  section-to-sig:
    TemplateSection(t*) -> sig*
    with
      sig* := <filter(template-to-sig); not(?[])> t*

  template-to-sig:
    TemplateProductionWithCons(SortCons(SortDef(s), c), _, Attrs(a*)) -> <cons-to-decl> c
    where
      <not(fetch-elem(?Reject() + ?Bracket()))> a*

  template-to-sig:
    TemplateProduction(SortDef(s), t, Attrs(a*)) -> OpDeclInj(t')
    where
      <not(fetch-elem(?Reject() + ?Bracket()))> a*
    with  
      temp-type := <get-sdf3-type> t;
      t'        := <try(check-fun-type)> FunType(temp-type, SortType(<strip-annos> s))

  cons-to-decl:
    Constructor(c) -> OpDecl(c, t)
    with
      t := <get-sdf3-type; try(check-fun-type)> c
     
  check-fun-type: FunType([], t) -> t

  sort-to-placeholder-sig:
        sort -> OpDecl($[[sort]-Plhdr], ConstType(SortNoArgs($[[sort]])))

  sort-to-opt-placeholder-sig:
        sort -> OpDecl($[[sort]-Opt-Plhdr], ConstType(SortNoArgs($[[sort]])))

  sort-to-placeholder-insertion-sig:
        sort -> OpDecl(
              $[[sort]-Plhdr]
            , FunType([ConstType(SortNoArgs("COMPLETION-INSERTION"))], ConstType(SortNoArgs($[[sort]])))
            )

  get-sdf3-type = where(prim("spoofax_version"); ?2) < get-type + statix-get-type
