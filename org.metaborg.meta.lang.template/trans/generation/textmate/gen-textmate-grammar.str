module generation/textmate/gen-textmate-grammar

imports 
  libstratego-sglr
  libstratego-lib
  libspoofax/resource/cache
  libspoofax/stratego/debug
  generation/gen-utils/remove-template
  generation/syntax/gen-exp-grammars
  
imports
  signatures/aliases/-
  signatures/aterms/-
  signatures/basic/-
  signatures/characterclass/-
  signatures/constants/-
  signatures/grammar/-
  signatures/kernel/-
  signatures/labels/-
  signatures/layout/-
  signatures/layout-constraints/-
  signatures/lifting/-
  signatures/literals/-
  signatures/modules/-
  signatures/priority/-
  signatures/regular/-
  signatures/renaming/-
  signatures/restrictions/-
  signatures/sdf2-core/-
  signatures/sorts/-
  signatures/symbols/-
  signatures/TemplateLang-sig
  
rules

   to-textmate(|project-path, path):
     m@Module(Unparameterized(mn), i*, sections*) -> result
     where
       name' := <strip-annos> mn;  
       rules(expanded-module: name' -> <id>)
     where
       dir            := <dirname> path;
       i'*            := <mapconcat(?Imports(<id>))> i*;
       imp-asts*      := <filter(?Module(Unparameterized(<id>)); expand-import(|project-path, dir)); flatten-list> i'*;
       result := (<get-keywords> imp-asts*, <get-operators> imp-asts*)
    
    get-keywords = collect-all(get-keyword)
    get-keyword: String(x) -> <is-keyword> x
    
    get-operators = collect-all(get-operator)
    get-operator: String(x) -> <not(is-keyword)> x
    
    is-keyword = where(explode-string; [is-alpha + ?'_' | map(is-alphanum + ?'_' + ?'-') ])
       
	// extract:
	// - single line comments
	// - multi line comments
	// - string literals (and escapes)
	// - number literal
	// - identifiers
	// - keywords
	// - operators