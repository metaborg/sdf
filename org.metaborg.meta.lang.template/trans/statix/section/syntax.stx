module statix/section/syntax

imports

  statix/section/grammar
  statix/section/template
  statix/name
  statix/type
  statix/sort_cons
  statix/symbol
  statix/production
  statix/attribute

signature

  constructors
    Syntax                 : list(Production)        -> Grammar
    Lexical                : list(Production)        -> Grammar
    Contextfree            : list(Production)        -> Grammar
    Variables              : list(Production)        -> Grammar
    LexVariables           : list(Production)        -> Grammar
    VariablesProductive    : list(SdfProduction)     -> Grammar
    LexVariablesProductive : list(SdfProduction)     -> Grammar
    Kernel                 : list(SdfProduction)     -> Grammar
    LexicalSyntax          : list(SdfProduction)     -> Grammar
    ContextFreeSyntax      : list(GeneralProduction) -> Grammar

  sorts Production constructors // Kernel-style productions
    Prod : list(Symbol) * Symbol * Attributes -> Production

  sorts GeneralProduction constructors // General productions (explicated injection)
    GeneralProduction_SdfProduction      : SdfProduction      -> GeneralProduction
    GeneralProduction_TemplateProduction : TemplateProduction -> GeneralProduction

  sorts SdfProduction constructors // SDF2-style productions
    SdfProduction         : SymbolDef * RHS * Attributes -> SdfProduction
    SdfProductionWithCons : SortCons  * RHS * Attributes -> SdfProduction

  sorts RHS constructors
    Rhs : list(Symbol) -> RHS

rules

  grammarOK(s, Syntax(productions))                    :- kernelProductionsOK(s, KERNEL(), productions).
  grammarOK(s, Lexical(productions))                   :- kernelProductionsOK(s, LEXICAL(), productions).
  grammarOK(s, Contextfree(productions))               :- kernelProductionsOK(s, CONTEXTFREE(), productions).
  grammarOK(s, Variables(productions))                 :- kernelProductionsOK(s, VAR(), productions).
  grammarOK(s, LexVariables(productions))              :- kernelProductionsOK(s, VAR(), productions).
  grammarOK(s, VariablesProductive(sdfProductions))    :- typeOfSdfProductions(s, VAR(), sdfProductions) == _.
  grammarOK(s, LexVariablesProductive(sdfProductions)) :- typeOfSdfProductions(s, VAR(), sdfProductions) == _.
  grammarOK(s, Kernel(sdfProductions))                 :- typeOfSdfProductions(s, KERNEL(), sdfProductions) == _.
  grammarOK(s, LexicalSyntax(sdfProductions))          :- typeOfSdfProductions(s, LEXICAL(), sdfProductions) == _.
  grammarOK(s, ContextFreeSyntax(generalProductions))  :- generalProductionsOK(s, CONTEXTFREE(), generalProductions).

  kernelProductionOK: scope * SORT_KIND * Production
  kernelProductionOK(s, Kexpected, Prod(symbols, symbol, _)) :- {Kactual sProd}
    kindOfSymbol(s, symbol) == Kactual,
    try { Kactual == Kexpected } | error $[Sort of production is of kind [Kactual], but expected it to be of kind [Kexpected] due to the section the production is defined in]@symbol,
    new sProd, sProd -P-> s,
    typesOfSymbols(sProd, symbols) == _,
    typeOfSymbol(sProd, symbol) == _.
  kernelProductionsOK maps kernelProductionOK(*, *, list(*))

  generalProductionOK: scope * SORT_KIND * GeneralProduction
  generalProductionOK(s, Kexpected, GeneralProduction_SdfProduction(sdfProduction))           :-
    typeOfSdfProduction(s, Kexpected, sdfProduction) == _.
  generalProductionOK(s, Kexpected, GeneralProduction_TemplateProduction(templateProduction)) :-
    typeOfTemplateProduction(s, Kexpected, templateProduction) == _.
  generalProductionsOK maps generalProductionOK(*, *, list(*))

  typeOfSdfProduction: scope * SORT_KIND * SdfProduction -> TYPE
  typeOfSdfProduction(s, Kexpected, SdfProduction(symbolDef, rhs@Rhs(symbols), attrs)) = Tprod :- {Kactual sProd Tsymbols Tsort TprodNoLayout}
    kindOfSymbolDef(s, symbolDef) == Kactual,
    try { Kactual == Kexpected } | error $[Sort of production is of kind [Kactual], but expected it to be of kind [Kexpected] due to the section the production is defined in]@symbolDef,
    typeOfSymbolDef(s, symbolDef) == Tsort,
    new sProd, sProd -P-> s,
    typesOfSymbols(sProd, symbols) == Tsymbols,
    Tprod == INJ(Tsymbols, Tsort),
    @rhs.type := Tprod,
    TprodNoLayout == removeLayoutFromProdResult(Tprod),
    symbolDefProductionOK(Kexpected, TprodNoLayout, attrs, symbolDef),
    attributesOk(sProd, countProdResult(TprodNoLayout), attrs).
  typeOfSdfProduction(s, Kexpected, SdfProductionWithCons(sortCons, rhs@Rhs(symbols), attrs)) = Tprod :- {Kactual sProd Tsymbols Tsort TprodNoLayout}
    kindOfSortCons(s, sortCons) == Kactual,
    try { Kactual == Kexpected } | error $[Sort of production is of kind [Kactual], but expected it to be of kind [Kexpected] due to the section the production is defined in]@sortCons,
    declareSortCons(s, Tsymbols, sortCons) == Tprod,
    new sProd, sProd -P-> s,
    typesOfSymbols(sProd, symbols) == Tsymbols,
    @rhs.type := Tprod,
    TprodNoLayout == removeLayoutFromProdResult(Tprod),
    sortConsProductionOK(Kexpected, TprodNoLayout, attrs, sortCons),
    attributesOk(sProd, countProdResult(TprodNoLayout), attrs).
  typeOfSdfProductions maps typeOfSdfProduction(*, *, list(*)) = list(*)
