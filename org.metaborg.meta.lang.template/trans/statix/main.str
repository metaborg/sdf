module statix/main

imports

  statixruntime
  statix/api
  analysis/types
  signatures/-
  signatures/sorts/Sorts-sig
  signatures/priority/Priority-sig
  signatures/kernel/-
  statix/check

imports

  analysis/lifting

rules // Editor

  statix-editor-analyze = stx-editor-analyze(pre-analyze, post-analyze|"statix/main", "projectOK", "fileOK")

  statix-editor-resolve = stx-editor-resolve

  statix-editor-hover = stx-editor-hover

signature constructors // Types

  SORT     : Occurrence        -> TYPE
  PROD     : list(TYPE) * TYPE -> TYPE
  INJ      : list(TYPE) * TYPE -> TYPE
  ITER     : TYPE              -> TYPE
  TERMINAL : TYPE
  LAYOUT   : TYPE

rules // Types

  statix-get-type:
    node -> type'
    where
      a     := <stx-get-ast-analysis <+ fail-msg(|$[no analysis on node [<write-to-string> node]])> node
    ; type  := <stx-get-ast-type(|a) <+ fail-msg(|$[no type on node [<write-to-string> node]])> node
    ; type' := <try(to-compatible-type)> type

  fail-msg(|msg) = err-msg(|$[get-type: [msg]]); fail

  remove-unnecessary-types = remove-all(?TERMINAL() + ?LAYOUT())

  to-compatible-type:
    SORT(occ) -> SortType(<stx-get-occurrence-terms; Hd> occ)

  // Injections are used in cfg-to-sig rules that produce OpDeclInj, and expect only the list of symbols.
  to-compatible-type:
    INJ(ts, _) -> <remove-unnecessary-types; map(try(to-compatible-type))> ts

  // Productions are used in cons-to-decl an expect a FunType.
  to-compatible-type:
    PROD(ts, t) -> FunType(<remove-unnecessary-types; map(try(to-compatible-type))> ts, <try(to-compatible-type)> t)

  to-compatible-type:
    ITER(t) -> ConstType(Sort("List", [<try(to-compatible-type)> t]))

rules // Debugging

  // Prints the analyzed annotated abstract syntax ATerm of a selection.
  statix-debug-show-analyzed: (selected, _, _, path, project-path) -> (filename, result)
    with filename := <guarantee-extension(|"analyzed.aterm")> path
       ; result   := selected

  statix-debug-show-pre-transformed:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"statix-pre-transformed.aterm")> path;
      result   := <pre-analyze> selected

  statix-debug-show-pre-post-transformed:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"statix-pre-post-transformed.aterm")> path;
      result   := <pre-analyze; post-analyze> selected

rules // Statix pre and post-transformation

  pre-analyze  = lift-all; explicate-all-injections; disambiguate-all-constructors
  post-analyze = ambiguate-all-constructors; unexplicate-all-injections

  explicate-all-injections   = topdown(try(  explicate-injection))
  unexplicate-all-injections = topdown(try(unexplicate-injection))

  disambiguate-all-constructors = topdown(try(disambiguate-constructor))
  ambiguate-all-constructors    = topdown(try(   ambiguate-constructor))

  explicate-injection      = fail
  unexplicate-injection    = fail
  disambiguate-constructor = fail
  ambiguate-constructor    = fail

signature constructors // GeneralProduction injections

  GeneralProduction_SdfProduction      : SdfProduction      -> GeneralProduction
  GeneralProduction_TemplateProduction : TemplateProduction -> GeneralProduction

rules

  explicate-injection   = ContextFreeSyntax(map(  explicate-general-production))
  unexplicate-injection = ContextFreeSyntax(map(unexplicate-general-production))

  explicate-general-production: prod@SdfProduction(_, _, _)              -> GeneralProduction_SdfProduction(prod)
  explicate-general-production: prod@SdfProductionWithCons(_, _, _)      -> GeneralProduction_SdfProduction(prod)
  explicate-general-production: prod@TemplateProduction(_, _, _)         -> GeneralProduction_TemplateProduction(prod)
  explicate-general-production: prod@TemplateProductionWithCons(_, _, _) -> GeneralProduction_TemplateProduction(prod)
  unexplicate-general-production: GeneralProduction_SdfProduction(prod)      -> prod
  unexplicate-general-production: GeneralProduction_TemplateProduction(prod) -> prod

signature constructors // PriorityProduction injections

  PriorityProduction_SdfProduction : SdfProduction -> PriorityProduction
  PriorityProduction_Production    : Production    -> PriorityProduction

rules

  explicate-injection = SimpleGroup(        explicate-priority-production )
  explicate-injection = ProdsGroup (    map(explicate-priority-production))
  explicate-injection = AssocGroup (id, map(explicate-priority-production))
  unexplicate-injection = SimpleGroup(        unexplicate-priority-production )
  unexplicate-injection = ProdsGroup (    map(unexplicate-priority-production))
  unexplicate-injection = AssocGroup (id, map(unexplicate-priority-production))

  explicate-priority-production: prod@SdfProduction(_, _, _)         -> PriorityProduction_SdfProduction(prod)
  explicate-priority-production: prod@SdfProductionWithCons(_, _, _) -> PriorityProduction_SdfProduction(prod)
  explicate-priority-production: prod@Prod(_, _, _)                  -> PriorityProduction_Production(prod)
  unexplicate-priority-production: PriorityProduction_SdfProduction(prod) -> prod
  unexplicate-priority-production: PriorityProduction_Production(prod)    -> prod

signature constructors // SymbolDef injections

  SymbolDef_Symbol : Symbol -> SymbolDef

rules

  explicate-injection = SdfProduction             (explicate-symboldef, id, id)
  explicate-injection = SdfProductionWithCons     (explicate-injection, id, id)
  explicate-injection = TemplateProduction        (explicate-symboldef, id, id)
  explicate-injection = TemplateProductionWithCons(explicate-injection, id, id)
  explicate-injection = KeywordAttributes         (explicate-symboldef, id)
  unexplicate-injection = SdfProduction             (unexplicate-symboldef, id, id)
  unexplicate-injection = SdfProductionWithCons     (unexplicate-injection, id, id)
  unexplicate-injection = TemplateProduction        (unexplicate-symboldef, id, id)
  unexplicate-injection = TemplateProductionWithCons(unexplicate-injection, id, id)
  unexplicate-injection = KeywordAttributes         (unexplicate-symboldef, id)

  explicate-symboldef: symbol -> SymbolDef_Symbol(symbol)
  where <not(?SortDef(_) <+ ?Cf(_) <+ ?Lex(_) <+ ?Var(_))> symbol
  unexplicate-symboldef: SymbolDef_Symbol(symbol) -> symbol

signature constructors // SymbolDef and ambiguous constructors

  SymbolDefCf  : SymbolDef -> SymbolDef
  SymbolDefLex : SymbolDef -> SymbolDef
  SymbolDefVar : SymbolDef -> SymbolDef

rules

  disambiguate-constructor = SdfProduction             (disambiguate-symboldef-constructor, id, id)
  disambiguate-constructor = SdfProductionWithCons     (disambiguate-constructor, id, id)
  disambiguate-constructor = TemplateProduction        (disambiguate-symboldef-constructor, id, id)
  disambiguate-constructor = TemplateProductionWithCons(disambiguate-constructor, id, id)
  disambiguate-constructor = KeywordAttributes         (disambiguate-symboldef-constructor, id)
  ambiguate-constructor = SdfProduction             (ambiguate-symboldef-constructor, id, id)
  ambiguate-constructor = SdfProductionWithCons     (ambiguate-constructor, id, id)
  ambiguate-constructor = TemplateProduction        (ambiguate-symboldef-constructor, id, id)
  ambiguate-constructor = TemplateProductionWithCons(ambiguate-constructor, id, id)
  ambiguate-constructor = KeywordAttributes         (ambiguate-symboldef-constructor, id)

  disambiguate-constructor = SortCons(disambiguate-symboldef-constructor, id)
  ambiguate-constructor = SortCons(ambiguate-symboldef-constructor, id)

  disambiguate-symboldef-constructor:  Cf(symbolDef) -> SymbolDefCf (symbolDef)
  disambiguate-symboldef-constructor: Lex(symbolDef) -> SymbolDefLex(symbolDef)
  disambiguate-symboldef-constructor: Var(symbolDef) -> SymbolDefVar(symbolDef)
  ambiguate-symboldef-constructor: SymbolDefCf (symbolDef) -> Cf (symbolDef)
  ambiguate-symboldef-constructor: SymbolDefLex(symbolDef) -> Lex(symbolDef)
  ambiguate-symboldef-constructor: SymbolDefVar(symbolDef) -> Var(symbolDef)

signature constructors // Layout constraints line

  ConstraintExpLine : ConstraintToken -> ConstraintExp
  
rules

  disambiguate-constructor = Attrs(topdown(try(disambiguate-constraint-line-constructor)))
  disambiguate-constraint-line-constructor: Line(token) -> ConstraintExpLine(token)
  ambiguate-constructor = Attrs(topdown(try(ambiguate-constraint-line-constructor)))
  ambiguate-constraint-line-constructor: ConstraintExpLine(token) -> Line(token)

rules // PosRef contents to int

  disambiguate-constructor = PosRef(string-to-int)
  ambiguate-constructor = PosRef(int-to-string)
