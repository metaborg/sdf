module statix/symbol

imports

  statix/type
  statix/sort
  statix/label

signature

  sorts Symbol constructors
    Sort              : string                -> Symbol
    ParameterizedSort : string * list(Symbol) -> Symbol

    Cf          : Symbol                -> Symbol
    Lex         : Symbol                -> Symbol
    Varsym      : Symbol                -> Symbol
    Label       : Label  * Symbol       -> Symbol
    Sequence    : Symbol * list(Symbol) -> Symbol
    Opt         : Symbol                -> Symbol
    Iter        : Symbol                -> Symbol
    IterStar    : Symbol                -> Symbol
    IterSep     : Symbol * Separator    -> Symbol
    IterStarSep : Symbol * Separator    -> Symbol
    Alt         : Symbol * Symbol       -> Symbol

    Layout    :              Symbol
    CharClass : CharClass -> Symbol
    Lit       : string    -> Symbol
    CiLit     : string    -> Symbol

  sorts Separator CharClass

rules

  typeOfSymbol: scope * Symbol -> TYPE

  typeOfSymbol(s, sy@Sort(name)) = T :-
    typeOfSort(s, name) == T,
    @sy.type := T.
  typeOfSymbol(s, sy@ParameterizedSort(name, symbols)) = T :-
    typeOfSort(s, name) == T,
    typesOfSymbols(s, symbols) == _,
    @sy.type := T.

  typeOfSymbol(s, Cf(symbol)) = T :-
    typeOfSymbol(s, symbol) == T.
  typeOfSymbol(s, Lex(symbol)) = T :-
    typeOfSymbol(s, symbol) == T.
  typeOfSymbol(s, Varsym(symbol)) = T :-
    typeOfSymbol(s, symbol) == T.
  typeOfSymbol(s, Label(label, symbol)) = T :-
    labelOK(s, label),
    typeOfSymbol(s, symbol)  == T.
  typeOfSymbol(s, Sequence(symbol, symbols)) = SEQ(T, TS) :-
    typeOfSymbol(s, symbol) == T,
    typesOfSymbols(s, symbols) == TS.
  typeOfSymbol(s, Opt(symbol)) = OPT(T) :-
    typeOfSymbol(s, symbol) == T.
  typeOfSymbol(s, Iter(symbol)) = ITER(T) :-
    typeOfSymbol(s, symbol) == T.
  typeOfSymbol(s, IterStar(symbol)) = ITER(T) :-
    typeOfSymbol(s, symbol) == T.
  typeOfSymbol(s, IterSep(symbol, _)) = ITER(T) :-
    typeOfSymbol(s, symbol) == T.
  typeOfSymbol(s, IterStarSep(symbol, _)) = ITER(T) :-
    typeOfSymbol(s, symbol) == T.
  typeOfSymbol(s, Alt(symbol1, symbol2)) = ALT(T1, T2) :-
    typeOfSymbol(s, symbol1) == T1,
    typeOfSymbol(s, symbol2) == T2.

  typeOfSymbol(s, Layout())     = LAYOUT().
  typeOfSymbol(s, CharClass(_)) = TERMINAL().
  typeOfSymbol(s, Lit(_))       = TERMINAL().
  typeOfSymbol(s, CiLit(_))     = TERMINAL().

  typesOfSymbols maps typeOfSymbol(*, list(*)) = list(*)

rules

  kindOfSymbol: scope * Symbol -> SORT_KIND

  kindOfSymbol(s, sy@Sort(name)) = K :-
    kindOfSort(s, name) == K,
    @sy.kind := K.
  kindOfSymbol(s, sy@ParameterizedSort(name, symbols)) = K :-
    kindOfSort(s, name) == K,
    kindsOfSymbols(s, symbols) == _,
    @sy.kind := K.

  kindOfSymbol(s, Cf(symbol)) = CONTEXTFREE() :-
    kindOfSymbol(s, symbol) == _. // TODO: check kind?
  kindOfSymbol(s, Lex(symbol)) = LEXICAL() :-
    kindOfSymbol(s, symbol) == _. // TODO: check kind?
  kindOfSymbol(s, Varsym(symbol)) = VAR() :-
    kindOfSymbol(s, symbol) == _. // TODO: check kind?
  kindOfSymbol(s, Label(label, symbol)) = K :-
    labelOK(s, label),
    kindOfSymbol(s, symbol) == K.
  kindOfSymbol(s, Sequence(symbol, symbols)) = K :- // TODO: what is the kind of a sequence?
    kindOfSymbol(s, symbol) == K,
    kindsOfSymbols(s, symbols) == _. // TODO: check kinds?
  kindOfSymbol(s, Opt(symbol)) = K :- // TODO: what is the kind of an option?
    kindOfSymbol(s, symbol) == K.
  kindOfSymbol(s, Iter(symbol)) = K :- // TODO: what is the kind of an iter?
    kindOfSymbol(s, symbol) == K.
  kindOfSymbol(s, IterStar(symbol)) = K :- // TODO: what is the kind of an iterstar?
    kindOfSymbol(s, symbol) == K.
  kindOfSymbol(s, IterSep(symbol, _)) = K :- // TODO: what is the kind of an itersep?
    kindOfSymbol(s, symbol) == K.
  kindOfSymbol(s, IterStarSep(symbol, _)) = K :- // TODO: what is the kind of an iterstarsep?
    kindOfSymbol(s, symbol) == K.
  kindOfSymbol(s, Alt(symbol1, symbol2)) = K :- // TODO: what is the kind of an alt?
    kindOfSymbol(s, symbol1) == K,
    kindOfSymbol(s, symbol2) == _. // TODO: check kinds?

  kindOfSymbol(s, Layout())     = LEXICAL().
  kindOfSymbol(s, CharClass(_)) = LEXICAL().
  kindOfSymbol(s, Lit(_))       = LEXICAL().
  kindOfSymbol(s, CiLit(_))     = LEXICAL().

  kindsOfSymbols maps kindOfSymbol(*, list(*)) = list(*)
