module kernel/Kernel

imports aterms/Aterms 
        symbols/Symbols 
        grammar/Grammars
        constants/StrCon
        priority/Priority
        layout-constraints/Layout-Constraints
 
context-free syntax

ATermAttribute.Default = <<aterm:ATerm>>
Attribute.Term = <<ATermAttribute>>

Attributes.Attrs = <{<list:{Attribute ", "}*>}>
Attributes.NoAttrs = <>



//special attributes that should show up in the parse table as attr

Attribute.Deprecated = <deprecated(<StrCon>)> 
Attribute.Constructor = <cons(<StrCon>)> {deprecated("Use 'Sort.Cons' notation instead")}
Attribute = <<QuotedConstructor>> {prefer, deprecated("Use 'Sort.Cons' notation instead") }
QuotedConstructor.Constructor = <<StrCon>>

Attribute.Reject = <reject>
Attribute.Prefer = <prefer>
Attribute.Avoid = <avoid> 

Attribute.Bracket = <bracket>
Attribute.Assoc = <<Associativity>>

Attribute.LayoutConstraint = <layout(<Constraint>)> 
Attribute.LayoutConstraint = <layout(<ShortConstraint>)> 

Attribute.IgnoreLayout = <ignore-layout>
Attribute.EnforceNewLine = <enforce-newline>
Attribute.LongestMatch = <longest-match>
Attribute.ShortestMatch = <shortest-match>
Attribute.Recover      = <recover>

Attribute.CaseInsensitive = <case-insensitive>
Attribute.Deprecated = <deprecated>  

//new completion attributes
Attribute.Placeholder = <placeholder> 
Attribute.PlaceholderInsertion = <placeholder-insertion> 
Attribute.LiteralCompletion = <literal-completion> 


Production.Prod = <<Symbols> -\> <result:Symbol> <Attributes>> {deprecated("Use productive form instead")}

Productions = <<list:{Production "\n"}*>>

Grammar.Syntax = <
	syntax 

		<Productions>
		
		>