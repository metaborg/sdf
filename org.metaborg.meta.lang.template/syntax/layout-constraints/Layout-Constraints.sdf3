module layout-constraints/Layout-Constraints

imports

  constants/NatCon
  constants/StrCon
  constants/IdentifierCon

template options

  keyword -/- [a-zA-Z0-9]

context-free sorts

  Constraint
  ConstraintExp
  ConstraintToken
  ConstraintTreeRef

context-free syntax

  ConstraintTreeRef.PosRef = NatCon
  ConstraintTreeRef.LiteralRef = StrCon
  ConstraintTreeRef.LabelRef = IdCon

  ConstraintToken.First = <<ConstraintTreeRef>.first>
  ConstraintToken.Left = <<ConstraintTreeRef>.left>
  ConstraintToken.Right = <<ConstraintTreeRef>.right>
  ConstraintToken.Last = <<ConstraintTreeRef>.last>

  ConstraintExp = <(<ConstraintExp>)> {bracket}
  ConstraintExp.Mul = <<ConstraintExp> * <ConstraintExp>> {left}
  ConstraintExp.Div = <<ConstraintExp> / <ConstraintExp>> {left}
  ConstraintExp.Add = <<ConstraintExp> + <ConstraintExp>> {left}
  ConstraintExp.Sub = <<ConstraintExp> - <ConstraintExp>> {left}
  ConstraintExp.Line = <<ConstraintToken>.line>
  ConstraintExp.Col = <<ConstraintToken>.col>
  ConstraintExp.Num = NatCon

  Constraint = <(<Constraint>)> {bracket}
  Constraint.Eq = <<ConstraintExp> == <ConstraintExp>> {non-assoc}
  Constraint.Lt = <<ConstraintExp> \< <ConstraintExp>> {non-assoc}
  Constraint.Le = <<ConstraintExp> \<= <ConstraintExp>> {non-assoc}
  Constraint.Gt = <<ConstraintExp> \> <ConstraintExp>> {non-assoc}
  Constraint.Ge = <<ConstraintExp> \>= <ConstraintExp>> {non-assoc}
  Constraint.Not = <!<Constraint>>
  Constraint.And = <<Constraint> && <Constraint>> {left}
  Constraint.Or = <<Constraint> || <Constraint>> {left}

  Constraint.Offside = <offside <ConstraintTreeRef> <{ConstraintTreeRef ", "}*>>
  Constraint.Indent = <indent <ConstraintTreeRef> <{ConstraintTreeRef ", "}+>>
  Constraint.Align = <align <ConstraintTreeRef> <{ConstraintTreeRef ", "}+>>
  Constraint.AlignList = <align-list <ConstraintTreeRef>>
  Constraint.NewLineIndent = <newline-indent <ConstraintTreeRef> <{ConstraintTreeRef ", "}+>>

  Constraint.PPOffside = <pp-offside <ConstraintTreeRef> <{ConstraintTreeRef ", "}*>>
  Constraint.PPIndent = <pp-indent <ConstraintTreeRef> <{ConstraintTreeRef ", "}+>>
  Constraint.PPAlign = <pp-align <ConstraintTreeRef> <{ConstraintTreeRef ", "}+>>
  Constraint.PPAlignList = <pp-align-list <ConstraintTreeRef>>
  Constraint.PPNewLineIndent = <pp-newline-indent <ConstraintTreeRef> <{ConstraintTreeRef ", "}+>>
  Constraint.PPNewLineIndentBy = <pp-newline-indent-by(<NatCon>) <ConstraintTreeRef> <{ConstraintTreeRef ", "}+>>
  Constraint.PPNewLine = <pp-newline <ConstraintTreeRef>>
  Constraint.PPNewLineBy = <pp-newline(<NatCon>) <ConstraintTreeRef>>

context-free priorities

    Constraint.Not >
    {non-assoc:
      Constraint.Eq
      Constraint.Lt
      Constraint.Le
      Constraint.Gt
      Constraint.Ge
    } >
    Constraint.And >
    Constraint.Or,

    {left: ConstraintExp.Mul ConstraintExp.Div } > {left: ConstraintExp.Add ConstraintExp.Sub}
